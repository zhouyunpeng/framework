// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bom_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bom_2eproto;
namespace l3deditor {
namespace Bom {
class AnyValue;
class AnyValueDefaultTypeInternal;
extern AnyValueDefaultTypeInternal _AnyValue_default_instance_;
class Component;
class ComponentDefaultTypeInternal;
extern ComponentDefaultTypeInternal _Component_default_instance_;
class Component_IdEntry_DoNotUse;
class Component_IdEntry_DoNotUseDefaultTypeInternal;
extern Component_IdEntry_DoNotUseDefaultTypeInternal _Component_IdEntry_DoNotUse_default_instance_;
class Component_Instant;
class Component_InstantDefaultTypeInternal;
extern Component_InstantDefaultTypeInternal _Component_Instant_default_instance_;
class Component_Prototype;
class Component_PrototypeDefaultTypeInternal;
extern Component_PrototypeDefaultTypeInternal _Component_Prototype_default_instance_;
class Document;
class DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class Document_IdEntry_DoNotUse;
class Document_IdEntry_DoNotUseDefaultTypeInternal;
extern Document_IdEntry_DoNotUseDefaultTypeInternal _Document_IdEntry_DoNotUse_default_instance_;
class Document_InsFeatureEntry_DoNotUse;
class Document_InsFeatureEntry_DoNotUseDefaultTypeInternal;
extern Document_InsFeatureEntry_DoNotUseDefaultTypeInternal _Document_InsFeatureEntry_DoNotUse_default_instance_;
class InsFeature;
class InsFeatureDefaultTypeInternal;
extern InsFeatureDefaultTypeInternal _InsFeature_default_instance_;
}  // namespace Bom
}  // namespace l3deditor
PROTOBUF_NAMESPACE_OPEN
template<> ::l3deditor::Bom::AnyValue* Arena::CreateMaybeMessage<::l3deditor::Bom::AnyValue>(Arena*);
template<> ::l3deditor::Bom::Component* Arena::CreateMaybeMessage<::l3deditor::Bom::Component>(Arena*);
template<> ::l3deditor::Bom::Component_IdEntry_DoNotUse* Arena::CreateMaybeMessage<::l3deditor::Bom::Component_IdEntry_DoNotUse>(Arena*);
template<> ::l3deditor::Bom::Component_Instant* Arena::CreateMaybeMessage<::l3deditor::Bom::Component_Instant>(Arena*);
template<> ::l3deditor::Bom::Component_Prototype* Arena::CreateMaybeMessage<::l3deditor::Bom::Component_Prototype>(Arena*);
template<> ::l3deditor::Bom::Document* Arena::CreateMaybeMessage<::l3deditor::Bom::Document>(Arena*);
template<> ::l3deditor::Bom::Document_IdEntry_DoNotUse* Arena::CreateMaybeMessage<::l3deditor::Bom::Document_IdEntry_DoNotUse>(Arena*);
template<> ::l3deditor::Bom::Document_InsFeatureEntry_DoNotUse* Arena::CreateMaybeMessage<::l3deditor::Bom::Document_InsFeatureEntry_DoNotUse>(Arena*);
template<> ::l3deditor::Bom::InsFeature* Arena::CreateMaybeMessage<::l3deditor::Bom::InsFeature>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace l3deditor {
namespace Bom {

enum Component_Prototype_CUnits : int {
  Component_Prototype_CUnits_CUUnknow = 0,
  Component_Prototype_CUnits_CUMM = 1,
  Component_Prototype_CUnits_CUCM = 2,
  Component_Prototype_CUnits_CUM = 3,
  Component_Prototype_CUnits_CUIN = 10,
  Component_Prototype_CUnits_CUFT = 11,
  Component_Prototype_CUnits_Component_Prototype_CUnits_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Component_Prototype_CUnits_Component_Prototype_CUnits_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Component_Prototype_CUnits_IsValid(int value);
constexpr Component_Prototype_CUnits Component_Prototype_CUnits_CUnits_MIN = Component_Prototype_CUnits_CUUnknow;
constexpr Component_Prototype_CUnits Component_Prototype_CUnits_CUnits_MAX = Component_Prototype_CUnits_CUFT;
constexpr int Component_Prototype_CUnits_CUnits_ARRAYSIZE = Component_Prototype_CUnits_CUnits_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Component_Prototype_CUnits_descriptor();
template<typename T>
inline const std::string& Component_Prototype_CUnits_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Component_Prototype_CUnits>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Component_Prototype_CUnits_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Component_Prototype_CUnits_descriptor(), enum_t_value);
}
inline bool Component_Prototype_CUnits_Parse(
    const std::string& name, Component_Prototype_CUnits* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Component_Prototype_CUnits>(
    Component_Prototype_CUnits_descriptor(), name, value);
}
enum Component_CType : int {
  Component_CType_CTPrototype = 0,
  Component_CType_CTInstant = 1,
  Component_CType_Component_CType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Component_CType_Component_CType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Component_CType_IsValid(int value);
constexpr Component_CType Component_CType_CType_MIN = Component_CType_CTPrototype;
constexpr Component_CType Component_CType_CType_MAX = Component_CType_CTInstant;
constexpr int Component_CType_CType_ARRAYSIZE = Component_CType_CType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Component_CType_descriptor();
template<typename T>
inline const std::string& Component_CType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Component_CType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Component_CType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Component_CType_descriptor(), enum_t_value);
}
inline bool Component_CType_Parse(
    const std::string& name, Component_CType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Component_CType>(
    Component_CType_descriptor(), name, value);
}
// ===================================================================

class AnyValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Bom.AnyValue) */ {
 public:
  AnyValue();
  virtual ~AnyValue();

  AnyValue(const AnyValue& from);
  AnyValue(AnyValue&& from) noexcept
    : AnyValue() {
    *this = ::std::move(from);
  }

  inline AnyValue& operator=(const AnyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyValue& operator=(AnyValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnyValue& default_instance();

  enum ValueOneofCase {
    kStrVal = 2,
    kFVal = 3,
    kI32Val = 4,
    kI64Val = 5,
    kDVal = 6,
    VALUE_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyValue* internal_default_instance() {
    return reinterpret_cast<const AnyValue*>(
               &_AnyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnyValue& a, AnyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyValue* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyValue* New() const final {
    return CreateMaybeMessage<AnyValue>(nullptr);
  }

  AnyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnyValue& from);
  void MergeFrom(const AnyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Bom.AnyValue";
  }
  protected:
  explicit AnyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bom_2eproto);
    return ::descriptor_table_bom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kStrValFieldNumber = 2,
    kFValFieldNumber = 3,
    kI32ValFieldNumber = 4,
    kI64ValFieldNumber = 5,
    kDValFieldNumber = 6,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string strVal = 2;
  private:
  bool _internal_has_strval() const;
  public:
  void clear_strval();
  const std::string& strval() const;
  void set_strval(const std::string& value);
  void set_strval(std::string&& value);
  void set_strval(const char* value);
  void set_strval(const char* value, size_t size);
  std::string* mutable_strval();
  std::string* release_strval();
  void set_allocated_strval(std::string* strval);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_strval();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_strval(
      std::string* strval);
  private:
  const std::string& _internal_strval() const;
  void _internal_set_strval(const std::string& value);
  std::string* _internal_mutable_strval();
  public:

  // float fVal = 3;
  private:
  bool _internal_has_fval() const;
  public:
  void clear_fval();
  float fval() const;
  void set_fval(float value);
  private:
  float _internal_fval() const;
  void _internal_set_fval(float value);
  public:

  // int32 i32Val = 4;
  private:
  bool _internal_has_i32val() const;
  public:
  void clear_i32val();
  ::PROTOBUF_NAMESPACE_ID::int32 i32val() const;
  void set_i32val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i32val() const;
  void _internal_set_i32val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 i64Val = 5;
  private:
  bool _internal_has_i64val() const;
  public:
  void clear_i64val();
  ::PROTOBUF_NAMESPACE_ID::int64 i64val() const;
  void set_i64val(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_i64val() const;
  void _internal_set_i64val(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double dVal = 6;
  private:
  bool _internal_has_dval() const;
  public:
  void clear_dval();
  double dval() const;
  void set_dval(double value);
  private:
  double _internal_dval() const;
  void _internal_set_dval(double value);
  public:

  void clear_value_oneof();
  ValueOneofCase value_oneof_case() const;
  // @@protoc_insertion_point(class_scope:l3deditor.Bom.AnyValue)
 private:
  class _Internal;
  void set_has_strval();
  void set_has_fval();
  void set_has_i32val();
  void set_has_i64val();
  void set_has_dval();

  inline bool has_value_oneof() const;
  inline void clear_has_value_oneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  union ValueOneofUnion {
    ValueOneofUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strval_;
    float fval_;
    ::PROTOBUF_NAMESPACE_ID::int32 i32val_;
    ::PROTOBUF_NAMESPACE_ID::int64 i64val_;
    double dval_;
  } value_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bom_2eproto;
};
// -------------------------------------------------------------------

class Component_IdEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Component_IdEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Component_IdEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Component_IdEntry_DoNotUse();
  Component_IdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Component_IdEntry_DoNotUse& other);
  static const Component_IdEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Component_IdEntry_DoNotUse*>(&_Component_IdEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "l3deditor.Bom.Component.IdEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "l3deditor.Bom.Component.IdEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bom_2eproto);
    return ::descriptor_table_bom_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Component_Prototype :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Bom.Component.Prototype) */ {
 public:
  Component_Prototype();
  virtual ~Component_Prototype();

  Component_Prototype(const Component_Prototype& from);
  Component_Prototype(Component_Prototype&& from) noexcept
    : Component_Prototype() {
    *this = ::std::move(from);
  }

  inline Component_Prototype& operator=(const Component_Prototype& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component_Prototype& operator=(Component_Prototype&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Component_Prototype& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Component_Prototype* internal_default_instance() {
    return reinterpret_cast<const Component_Prototype*>(
               &_Component_Prototype_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Component_Prototype& a, Component_Prototype& b) {
    a.Swap(&b);
  }
  inline void Swap(Component_Prototype* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Component_Prototype* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Component_Prototype* New() const final {
    return CreateMaybeMessage<Component_Prototype>(nullptr);
  }

  Component_Prototype* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Component_Prototype>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Component_Prototype& from);
  void MergeFrom(const Component_Prototype& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Component_Prototype* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Bom.Component.Prototype";
  }
  protected:
  explicit Component_Prototype(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bom_2eproto);
    return ::descriptor_table_bom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Component_Prototype_CUnits CUnits;
  static constexpr CUnits CUUnknow =
    Component_Prototype_CUnits_CUUnknow;
  static constexpr CUnits CUMM =
    Component_Prototype_CUnits_CUMM;
  static constexpr CUnits CUCM =
    Component_Prototype_CUnits_CUCM;
  static constexpr CUnits CUM =
    Component_Prototype_CUnits_CUM;
  static constexpr CUnits CUIN =
    Component_Prototype_CUnits_CUIN;
  static constexpr CUnits CUFT =
    Component_Prototype_CUnits_CUFT;
  static inline bool CUnits_IsValid(int value) {
    return Component_Prototype_CUnits_IsValid(value);
  }
  static constexpr CUnits CUnits_MIN =
    Component_Prototype_CUnits_CUnits_MIN;
  static constexpr CUnits CUnits_MAX =
    Component_Prototype_CUnits_CUnits_MAX;
  static constexpr int CUnits_ARRAYSIZE =
    Component_Prototype_CUnits_CUnits_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CUnits_descriptor() {
    return Component_Prototype_CUnits_descriptor();
  }
  template<typename T>
  static inline const std::string& CUnits_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CUnits>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CUnits_Name.");
    return Component_Prototype_CUnits_Name(enum_t_value);
  }
  static inline bool CUnits_Parse(const std::string& name,
      CUnits* value) {
    return Component_Prototype_CUnits_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChildinsIdFieldNumber = 3,
    kRootnodeIdFieldNumber = 2,
    kCunitsFieldNumber = 1,
  };
  // repeated string childinsId = 3;
  int childinsid_size() const;
  private:
  int _internal_childinsid_size() const;
  public:
  void clear_childinsid();
  const std::string& childinsid(int index) const;
  std::string* mutable_childinsid(int index);
  void set_childinsid(int index, const std::string& value);
  void set_childinsid(int index, std::string&& value);
  void set_childinsid(int index, const char* value);
  void set_childinsid(int index, const char* value, size_t size);
  std::string* add_childinsid();
  void add_childinsid(const std::string& value);
  void add_childinsid(std::string&& value);
  void add_childinsid(const char* value);
  void add_childinsid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& childinsid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_childinsid();
  private:
  const std::string& _internal_childinsid(int index) const;
  std::string* _internal_add_childinsid();
  public:

  // string rootnodeId = 2;
  void clear_rootnodeid();
  const std::string& rootnodeid() const;
  void set_rootnodeid(const std::string& value);
  void set_rootnodeid(std::string&& value);
  void set_rootnodeid(const char* value);
  void set_rootnodeid(const char* value, size_t size);
  std::string* mutable_rootnodeid();
  std::string* release_rootnodeid();
  void set_allocated_rootnodeid(std::string* rootnodeid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rootnodeid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rootnodeid(
      std::string* rootnodeid);
  private:
  const std::string& _internal_rootnodeid() const;
  void _internal_set_rootnodeid(const std::string& value);
  std::string* _internal_mutable_rootnodeid();
  public:

  // .l3deditor.Bom.Component.Prototype.CUnits cunits = 1;
  void clear_cunits();
  ::l3deditor::Bom::Component_Prototype_CUnits cunits() const;
  void set_cunits(::l3deditor::Bom::Component_Prototype_CUnits value);
  private:
  ::l3deditor::Bom::Component_Prototype_CUnits _internal_cunits() const;
  void _internal_set_cunits(::l3deditor::Bom::Component_Prototype_CUnits value);
  public:

  // @@protoc_insertion_point(class_scope:l3deditor.Bom.Component.Prototype)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> childinsid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rootnodeid_;
  int cunits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bom_2eproto;
};
// -------------------------------------------------------------------

class Component_Instant :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Bom.Component.Instant) */ {
 public:
  Component_Instant();
  virtual ~Component_Instant();

  Component_Instant(const Component_Instant& from);
  Component_Instant(Component_Instant&& from) noexcept
    : Component_Instant() {
    *this = ::std::move(from);
  }

  inline Component_Instant& operator=(const Component_Instant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component_Instant& operator=(Component_Instant&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Component_Instant& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Component_Instant* internal_default_instance() {
    return reinterpret_cast<const Component_Instant*>(
               &_Component_Instant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Component_Instant& a, Component_Instant& b) {
    a.Swap(&b);
  }
  inline void Swap(Component_Instant* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Component_Instant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Component_Instant* New() const final {
    return CreateMaybeMessage<Component_Instant>(nullptr);
  }

  Component_Instant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Component_Instant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Component_Instant& from);
  void MergeFrom(const Component_Instant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Component_Instant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Bom.Component.Instant";
  }
  protected:
  explicit Component_Instant(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bom_2eproto);
    return ::descriptor_table_bom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrototypeIdFieldNumber = 1,
    kPlcIdFieldNumber = 2,
    kTransMatrixFieldNumber = 3,
    kMaterialFieldNumber = 4,
  };
  // string prototypeId = 1;
  void clear_prototypeid();
  const std::string& prototypeid() const;
  void set_prototypeid(const std::string& value);
  void set_prototypeid(std::string&& value);
  void set_prototypeid(const char* value);
  void set_prototypeid(const char* value, size_t size);
  std::string* mutable_prototypeid();
  std::string* release_prototypeid();
  void set_allocated_prototypeid(std::string* prototypeid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_prototypeid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_prototypeid(
      std::string* prototypeid);
  private:
  const std::string& _internal_prototypeid() const;
  void _internal_set_prototypeid(const std::string& value);
  std::string* _internal_mutable_prototypeid();
  public:

  // string plcId = 2;
  void clear_plcid();
  const std::string& plcid() const;
  void set_plcid(const std::string& value);
  void set_plcid(std::string&& value);
  void set_plcid(const char* value);
  void set_plcid(const char* value, size_t size);
  std::string* mutable_plcid();
  std::string* release_plcid();
  void set_allocated_plcid(std::string* plcid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_plcid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_plcid(
      std::string* plcid);
  private:
  const std::string& _internal_plcid() const;
  void _internal_set_plcid(const std::string& value);
  std::string* _internal_mutable_plcid();
  public:

  // .l3deditor.Base.Matrix44 transMatrix = 3;
  bool has_transmatrix() const;
  private:
  bool _internal_has_transmatrix() const;
  public:
  void clear_transmatrix();
  const ::l3deditor::Base::Matrix44& transmatrix() const;
  ::l3deditor::Base::Matrix44* release_transmatrix();
  ::l3deditor::Base::Matrix44* mutable_transmatrix();
  void set_allocated_transmatrix(::l3deditor::Base::Matrix44* transmatrix);
  private:
  const ::l3deditor::Base::Matrix44& _internal_transmatrix() const;
  ::l3deditor::Base::Matrix44* _internal_mutable_transmatrix();
  public:
  void unsafe_arena_set_allocated_transmatrix(
      ::l3deditor::Base::Matrix44* transmatrix);
  ::l3deditor::Base::Matrix44* unsafe_arena_release_transmatrix();

  // .l3deditor.Base.Material material = 4;
  bool has_material() const;
  private:
  bool _internal_has_material() const;
  public:
  void clear_material();
  const ::l3deditor::Base::Material& material() const;
  ::l3deditor::Base::Material* release_material();
  ::l3deditor::Base::Material* mutable_material();
  void set_allocated_material(::l3deditor::Base::Material* material);
  private:
  const ::l3deditor::Base::Material& _internal_material() const;
  ::l3deditor::Base::Material* _internal_mutable_material();
  public:
  void unsafe_arena_set_allocated_material(
      ::l3deditor::Base::Material* material);
  ::l3deditor::Base::Material* unsafe_arena_release_material();

  // @@protoc_insertion_point(class_scope:l3deditor.Bom.Component.Instant)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prototypeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plcid_;
  ::l3deditor::Base::Matrix44* transmatrix_;
  ::l3deditor::Base::Material* material_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bom_2eproto;
};
// -------------------------------------------------------------------

class Component :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Bom.Component) */ {
 public:
  Component();
  virtual ~Component();

  Component(const Component& from);
  Component(Component&& from) noexcept
    : Component() {
    *this = ::std::move(from);
  }

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component& operator=(Component&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Component& default_instance();

  enum CompOneofCase {
    kPrototype = 4,
    kInstant = 5,
    COMP_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Component* internal_default_instance() {
    return reinterpret_cast<const Component*>(
               &_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Component& a, Component& b) {
    a.Swap(&b);
  }
  inline void Swap(Component* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Component* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Component* New() const final {
    return CreateMaybeMessage<Component>(nullptr);
  }

  Component* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Component>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Component& from);
  void MergeFrom(const Component& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Component* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Bom.Component";
  }
  protected:
  explicit Component(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bom_2eproto);
    return ::descriptor_table_bom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Component_Prototype Prototype;
  typedef Component_Instant Instant;

  typedef Component_CType CType;
  static constexpr CType CTPrototype =
    Component_CType_CTPrototype;
  static constexpr CType CTInstant =
    Component_CType_CTInstant;
  static inline bool CType_IsValid(int value) {
    return Component_CType_IsValid(value);
  }
  static constexpr CType CType_MIN =
    Component_CType_CType_MIN;
  static constexpr CType CType_MAX =
    Component_CType_CType_MAX;
  static constexpr int CType_ARRAYSIZE =
    Component_CType_CType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CType_descriptor() {
    return Component_CType_descriptor();
  }
  template<typename T>
  static inline const std::string& CType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CType_Name.");
    return Component_CType_Name(enum_t_value);
  }
  static inline bool CType_Parse(const std::string& name,
      CType* value) {
    return Component_CType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPropertyFieldNumber = 10,
    kNameFieldNumber = 2,
    kCtypeFieldNumber = 3,
    kDrawStyleFieldNumber = 6,
    kPrototypeFieldNumber = 4,
    kInstantFieldNumber = 5,
  };
  // map<string, string> _id = 1;
  int _id_size() const;
  private:
  int _internal__id_size() const;
  public:
  void clear__id();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal__id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable__id();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable__id();

  // repeated .l3deditor.Bom.AnyValue property = 10;
  int property_size() const;
  private:
  int _internal_property_size() const;
  public:
  void clear_property();
  ::l3deditor::Bom::AnyValue* mutable_property(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::l3deditor::Bom::AnyValue >*
      mutable_property();
  private:
  const ::l3deditor::Bom::AnyValue& _internal_property(int index) const;
  ::l3deditor::Bom::AnyValue* _internal_add_property();
  public:
  const ::l3deditor::Bom::AnyValue& property(int index) const;
  ::l3deditor::Bom::AnyValue* add_property();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::l3deditor::Bom::AnyValue >&
      property() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .l3deditor.Bom.Component.CType ctype = 3;
  void clear_ctype();
  ::l3deditor::Bom::Component_CType ctype() const;
  void set_ctype(::l3deditor::Bom::Component_CType value);
  private:
  ::l3deditor::Bom::Component_CType _internal_ctype() const;
  void _internal_set_ctype(::l3deditor::Bom::Component_CType value);
  public:

  // .l3deditor.Base.DrawStyle drawStyle = 6;
  void clear_drawstyle();
  ::l3deditor::Base::DrawStyle drawstyle() const;
  void set_drawstyle(::l3deditor::Base::DrawStyle value);
  private:
  ::l3deditor::Base::DrawStyle _internal_drawstyle() const;
  void _internal_set_drawstyle(::l3deditor::Base::DrawStyle value);
  public:

  // .l3deditor.Bom.Component.Prototype prototype = 4;
  bool has_prototype() const;
  private:
  bool _internal_has_prototype() const;
  public:
  void clear_prototype();
  const ::l3deditor::Bom::Component_Prototype& prototype() const;
  ::l3deditor::Bom::Component_Prototype* release_prototype();
  ::l3deditor::Bom::Component_Prototype* mutable_prototype();
  void set_allocated_prototype(::l3deditor::Bom::Component_Prototype* prototype);
  private:
  const ::l3deditor::Bom::Component_Prototype& _internal_prototype() const;
  ::l3deditor::Bom::Component_Prototype* _internal_mutable_prototype();
  public:
  void unsafe_arena_set_allocated_prototype(
      ::l3deditor::Bom::Component_Prototype* prototype);
  ::l3deditor::Bom::Component_Prototype* unsafe_arena_release_prototype();

  // .l3deditor.Bom.Component.Instant instant = 5;
  bool has_instant() const;
  private:
  bool _internal_has_instant() const;
  public:
  void clear_instant();
  const ::l3deditor::Bom::Component_Instant& instant() const;
  ::l3deditor::Bom::Component_Instant* release_instant();
  ::l3deditor::Bom::Component_Instant* mutable_instant();
  void set_allocated_instant(::l3deditor::Bom::Component_Instant* instant);
  private:
  const ::l3deditor::Bom::Component_Instant& _internal_instant() const;
  ::l3deditor::Bom::Component_Instant* _internal_mutable_instant();
  public:
  void unsafe_arena_set_allocated_instant(
      ::l3deditor::Bom::Component_Instant* instant);
  ::l3deditor::Bom::Component_Instant* unsafe_arena_release_instant();

  void clear_comp_oneof();
  CompOneofCase comp_oneof_case() const;
  // @@protoc_insertion_point(class_scope:l3deditor.Bom.Component)
 private:
  class _Internal;
  void set_has_prototype();
  void set_has_instant();

  inline bool has_comp_oneof() const;
  inline void clear_has_comp_oneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Component_IdEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > _id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::l3deditor::Bom::AnyValue > property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int ctype_;
  int drawstyle_;
  union CompOneofUnion {
    CompOneofUnion() {}
    ::l3deditor::Bom::Component_Prototype* prototype_;
    ::l3deditor::Bom::Component_Instant* instant_;
  } comp_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bom_2eproto;
};
// -------------------------------------------------------------------

class InsFeature :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Bom.InsFeature) */ {
 public:
  InsFeature();
  virtual ~InsFeature();

  InsFeature(const InsFeature& from);
  InsFeature(InsFeature&& from) noexcept
    : InsFeature() {
    *this = ::std::move(from);
  }

  inline InsFeature& operator=(const InsFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsFeature& operator=(InsFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsFeature* internal_default_instance() {
    return reinterpret_cast<const InsFeature*>(
               &_InsFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InsFeature& a, InsFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(InsFeature* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsFeature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsFeature* New() const final {
    return CreateMaybeMessage<InsFeature>(nullptr);
  }

  InsFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsFeature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsFeature& from);
  void MergeFrom(const InsFeature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsFeature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Bom.InsFeature";
  }
  protected:
  explicit InsFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bom_2eproto);
    return ::descriptor_table_bom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsUidFieldNumber = 2,
    kInsPathFieldNumber = 1,
    kMaterialFieldNumber = 4,
    kDrawStyleFieldNumber = 3,
  };
  // repeated string insUid = 2;
  int insuid_size() const;
  private:
  int _internal_insuid_size() const;
  public:
  void clear_insuid();
  const std::string& insuid(int index) const;
  std::string* mutable_insuid(int index);
  void set_insuid(int index, const std::string& value);
  void set_insuid(int index, std::string&& value);
  void set_insuid(int index, const char* value);
  void set_insuid(int index, const char* value, size_t size);
  std::string* add_insuid();
  void add_insuid(const std::string& value);
  void add_insuid(std::string&& value);
  void add_insuid(const char* value);
  void add_insuid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& insuid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_insuid();
  private:
  const std::string& _internal_insuid(int index) const;
  std::string* _internal_add_insuid();
  public:

  // string insPath = 1;
  void clear_inspath();
  const std::string& inspath() const;
  void set_inspath(const std::string& value);
  void set_inspath(std::string&& value);
  void set_inspath(const char* value);
  void set_inspath(const char* value, size_t size);
  std::string* mutable_inspath();
  std::string* release_inspath();
  void set_allocated_inspath(std::string* inspath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_inspath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_inspath(
      std::string* inspath);
  private:
  const std::string& _internal_inspath() const;
  void _internal_set_inspath(const std::string& value);
  std::string* _internal_mutable_inspath();
  public:

  // .l3deditor.Base.Material material = 4;
  bool has_material() const;
  private:
  bool _internal_has_material() const;
  public:
  void clear_material();
  const ::l3deditor::Base::Material& material() const;
  ::l3deditor::Base::Material* release_material();
  ::l3deditor::Base::Material* mutable_material();
  void set_allocated_material(::l3deditor::Base::Material* material);
  private:
  const ::l3deditor::Base::Material& _internal_material() const;
  ::l3deditor::Base::Material* _internal_mutable_material();
  public:
  void unsafe_arena_set_allocated_material(
      ::l3deditor::Base::Material* material);
  ::l3deditor::Base::Material* unsafe_arena_release_material();

  // .l3deditor.Base.DrawStyle drawStyle = 3;
  void clear_drawstyle();
  ::l3deditor::Base::DrawStyle drawstyle() const;
  void set_drawstyle(::l3deditor::Base::DrawStyle value);
  private:
  ::l3deditor::Base::DrawStyle _internal_drawstyle() const;
  void _internal_set_drawstyle(::l3deditor::Base::DrawStyle value);
  public:

  // @@protoc_insertion_point(class_scope:l3deditor.Bom.InsFeature)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> insuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inspath_;
  ::l3deditor::Base::Material* material_;
  int drawstyle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bom_2eproto;
};
// -------------------------------------------------------------------

class Document_IdEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_IdEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_IdEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Document_IdEntry_DoNotUse();
  Document_IdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Document_IdEntry_DoNotUse& other);
  static const Document_IdEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Document_IdEntry_DoNotUse*>(&_Document_IdEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "l3deditor.Bom.Document.IdEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "l3deditor.Bom.Document.IdEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bom_2eproto);
    return ::descriptor_table_bom_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class Document_InsFeatureEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_InsFeatureEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::l3deditor::Bom::InsFeature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Document_InsFeatureEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::l3deditor::Bom::InsFeature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Document_InsFeatureEntry_DoNotUse();
  Document_InsFeatureEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Document_InsFeatureEntry_DoNotUse& other);
  static const Document_InsFeatureEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Document_InsFeatureEntry_DoNotUse*>(&_Document_InsFeatureEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bom_2eproto);
    return ::descriptor_table_bom_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class Document :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Bom.Document) */ {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  inline Document& operator=(Document&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Document& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }
  inline void Swap(Document* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Document* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Document* New() const final {
    return CreateMaybeMessage<Document>(nullptr);
  }

  Document* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Document>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Document* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Bom.Document";
  }
  protected:
  explicit Document(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bom_2eproto);
    return ::descriptor_table_bom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTopprotoIdsFieldNumber = 3,
    kInsFeatureFieldNumber = 4,
    kFileInfoFieldNumber = 6,
    kNameFieldNumber = 2,
    kFileNameFieldNumber = 5,
  };
  // map<string, string> _id = 1;
  int _id_size() const;
  private:
  int _internal__id_size() const;
  public:
  void clear__id();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal__id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable__id();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable__id();

  // repeated string topprotoIds = 3;
  int topprotoids_size() const;
  private:
  int _internal_topprotoids_size() const;
  public:
  void clear_topprotoids();
  const std::string& topprotoids(int index) const;
  std::string* mutable_topprotoids(int index);
  void set_topprotoids(int index, const std::string& value);
  void set_topprotoids(int index, std::string&& value);
  void set_topprotoids(int index, const char* value);
  void set_topprotoids(int index, const char* value, size_t size);
  std::string* add_topprotoids();
  void add_topprotoids(const std::string& value);
  void add_topprotoids(std::string&& value);
  void add_topprotoids(const char* value);
  void add_topprotoids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topprotoids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topprotoids();
  private:
  const std::string& _internal_topprotoids(int index) const;
  std::string* _internal_add_topprotoids();
  public:

  // map<uint32, .l3deditor.Bom.InsFeature> insFeature = 4;
  int insfeature_size() const;
  private:
  int _internal_insfeature_size() const;
  public:
  void clear_insfeature();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::l3deditor::Bom::InsFeature >&
      _internal_insfeature() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::l3deditor::Bom::InsFeature >*
      _internal_mutable_insfeature();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::l3deditor::Bom::InsFeature >&
      insfeature() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::l3deditor::Bom::InsFeature >*
      mutable_insfeature();

  // repeated .l3deditor.Bom.AnyValue fileInfo = 6;
  int fileinfo_size() const;
  private:
  int _internal_fileinfo_size() const;
  public:
  void clear_fileinfo();
  ::l3deditor::Bom::AnyValue* mutable_fileinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::l3deditor::Bom::AnyValue >*
      mutable_fileinfo();
  private:
  const ::l3deditor::Bom::AnyValue& _internal_fileinfo(int index) const;
  ::l3deditor::Bom::AnyValue* _internal_add_fileinfo();
  public:
  const ::l3deditor::Bom::AnyValue& fileinfo(int index) const;
  ::l3deditor::Bom::AnyValue* add_fileinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::l3deditor::Bom::AnyValue >&
      fileinfo() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string fileName = 5;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filename(
      std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // @@protoc_insertion_point(class_scope:l3deditor.Bom.Document)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Document_IdEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > _id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topprotoids_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Document_InsFeatureEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::l3deditor::Bom::InsFeature,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > insfeature_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::l3deditor::Bom::AnyValue > fileinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnyValue

// string key = 1;
inline void AnyValue::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& AnyValue::key() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.AnyValue.key)
  return _internal_key();
}
inline void AnyValue::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.AnyValue.key)
}
inline std::string* AnyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.AnyValue.key)
  return _internal_mutable_key();
}
inline const std::string& AnyValue::_internal_key() const {
  return key_.Get();
}
inline void AnyValue::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void AnyValue::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Bom.AnyValue.key)
}
inline void AnyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Bom.AnyValue.key)
}
inline void AnyValue::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Bom.AnyValue.key)
}
inline std::string* AnyValue::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* AnyValue::release_key() {
  // @@protoc_insertion_point(field_release:l3deditor.Bom.AnyValue.key)
  
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void AnyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Bom.AnyValue.key)
}
inline std::string* AnyValue::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Bom.AnyValue.key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void AnyValue::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Bom.AnyValue.key)
}

// string strVal = 2;
inline bool AnyValue::_internal_has_strval() const {
  return value_oneof_case() == kStrVal;
}
inline void AnyValue::set_has_strval() {
  _oneof_case_[0] = kStrVal;
}
inline void AnyValue::clear_strval() {
  if (_internal_has_strval()) {
    value_oneof_.strval_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_value_oneof();
  }
}
inline const std::string& AnyValue::strval() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.AnyValue.strVal)
  return _internal_strval();
}
inline void AnyValue::set_strval(const std::string& value) {
  _internal_set_strval(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.AnyValue.strVal)
}
inline std::string* AnyValue::mutable_strval() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.AnyValue.strVal)
  return _internal_mutable_strval();
}
inline const std::string& AnyValue::_internal_strval() const {
  if (_internal_has_strval()) {
    return value_oneof_.strval_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AnyValue::_internal_set_strval(const std::string& value) {
  if (!_internal_has_strval()) {
    clear_value_oneof();
    set_has_strval();
    value_oneof_.strval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_oneof_.strval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
}
inline void AnyValue::set_strval(std::string&& value) {
  // @@protoc_insertion_point(field_set:l3deditor.Bom.AnyValue.strVal)
  if (!_internal_has_strval()) {
    clear_value_oneof();
    set_has_strval();
    value_oneof_.strval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_oneof_.strval_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Bom.AnyValue.strVal)
}
inline void AnyValue::set_strval(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_strval()) {
    clear_value_oneof();
    set_has_strval();
    value_oneof_.strval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_oneof_.strval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Bom.AnyValue.strVal)
}
inline void AnyValue::set_strval(const char* value,
                             size_t size) {
  if (!_internal_has_strval()) {
    clear_value_oneof();
    set_has_strval();
    value_oneof_.strval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_oneof_.strval_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Bom.AnyValue.strVal)
}
inline std::string* AnyValue::_internal_mutable_strval() {
  if (!_internal_has_strval()) {
    clear_value_oneof();
    set_has_strval();
    value_oneof_.strval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_oneof_.strval_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline std::string* AnyValue::release_strval() {
  // @@protoc_insertion_point(field_release:l3deditor.Bom.AnyValue.strVal)
  if (_internal_has_strval()) {
    clear_has_value_oneof();
    return value_oneof_.strval_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void AnyValue::set_allocated_strval(std::string* strval) {
  if (has_value_oneof()) {
    clear_value_oneof();
  }
  if (strval != nullptr) {
    set_has_strval();
    value_oneof_.strval_.UnsafeSetDefault(strval);
  }
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Bom.AnyValue.strVal)
}
inline std::string* AnyValue::unsafe_arena_release_strval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Bom.AnyValue.strVal)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (_internal_has_strval()) {
    clear_has_value_oneof();
    return value_oneof_.strval_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_strval(std::string* strval) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!_internal_has_strval()) {
    value_oneof_.strval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_value_oneof();
  if (strval) {
    set_has_strval();
    value_oneof_.strval_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strval, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Bom.AnyValue.strVal)
}

// float fVal = 3;
inline bool AnyValue::_internal_has_fval() const {
  return value_oneof_case() == kFVal;
}
inline void AnyValue::set_has_fval() {
  _oneof_case_[0] = kFVal;
}
inline void AnyValue::clear_fval() {
  if (_internal_has_fval()) {
    value_oneof_.fval_ = 0;
    clear_has_value_oneof();
  }
}
inline float AnyValue::_internal_fval() const {
  if (_internal_has_fval()) {
    return value_oneof_.fval_;
  }
  return 0;
}
inline void AnyValue::_internal_set_fval(float value) {
  if (!_internal_has_fval()) {
    clear_value_oneof();
    set_has_fval();
  }
  value_oneof_.fval_ = value;
}
inline float AnyValue::fval() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.AnyValue.fVal)
  return _internal_fval();
}
inline void AnyValue::set_fval(float value) {
  _internal_set_fval(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.AnyValue.fVal)
}

// int32 i32Val = 4;
inline bool AnyValue::_internal_has_i32val() const {
  return value_oneof_case() == kI32Val;
}
inline void AnyValue::set_has_i32val() {
  _oneof_case_[0] = kI32Val;
}
inline void AnyValue::clear_i32val() {
  if (_internal_has_i32val()) {
    value_oneof_.i32val_ = 0;
    clear_has_value_oneof();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnyValue::_internal_i32val() const {
  if (_internal_has_i32val()) {
    return value_oneof_.i32val_;
  }
  return 0;
}
inline void AnyValue::_internal_set_i32val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_i32val()) {
    clear_value_oneof();
    set_has_i32val();
  }
  value_oneof_.i32val_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnyValue::i32val() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.AnyValue.i32Val)
  return _internal_i32val();
}
inline void AnyValue::set_i32val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i32val(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.AnyValue.i32Val)
}

// int64 i64Val = 5;
inline bool AnyValue::_internal_has_i64val() const {
  return value_oneof_case() == kI64Val;
}
inline void AnyValue::set_has_i64val() {
  _oneof_case_[0] = kI64Val;
}
inline void AnyValue::clear_i64val() {
  if (_internal_has_i64val()) {
    value_oneof_.i64val_ = PROTOBUF_LONGLONG(0);
    clear_has_value_oneof();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AnyValue::_internal_i64val() const {
  if (_internal_has_i64val()) {
    return value_oneof_.i64val_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void AnyValue::_internal_set_i64val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_i64val()) {
    clear_value_oneof();
    set_has_i64val();
  }
  value_oneof_.i64val_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AnyValue::i64val() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.AnyValue.i64Val)
  return _internal_i64val();
}
inline void AnyValue::set_i64val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_i64val(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.AnyValue.i64Val)
}

// double dVal = 6;
inline bool AnyValue::_internal_has_dval() const {
  return value_oneof_case() == kDVal;
}
inline void AnyValue::set_has_dval() {
  _oneof_case_[0] = kDVal;
}
inline void AnyValue::clear_dval() {
  if (_internal_has_dval()) {
    value_oneof_.dval_ = 0;
    clear_has_value_oneof();
  }
}
inline double AnyValue::_internal_dval() const {
  if (_internal_has_dval()) {
    return value_oneof_.dval_;
  }
  return 0;
}
inline void AnyValue::_internal_set_dval(double value) {
  if (!_internal_has_dval()) {
    clear_value_oneof();
    set_has_dval();
  }
  value_oneof_.dval_ = value;
}
inline double AnyValue::dval() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.AnyValue.dVal)
  return _internal_dval();
}
inline void AnyValue::set_dval(double value) {
  _internal_set_dval(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.AnyValue.dVal)
}

inline bool AnyValue::has_value_oneof() const {
  return value_oneof_case() != VALUE_ONEOF_NOT_SET;
}
inline void AnyValue::clear_has_value_oneof() {
  _oneof_case_[0] = VALUE_ONEOF_NOT_SET;
}
inline AnyValue::ValueOneofCase AnyValue::value_oneof_case() const {
  return AnyValue::ValueOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Component_Prototype

// .l3deditor.Bom.Component.Prototype.CUnits cunits = 1;
inline void Component_Prototype::clear_cunits() {
  cunits_ = 0;
}
inline ::l3deditor::Bom::Component_Prototype_CUnits Component_Prototype::_internal_cunits() const {
  return static_cast< ::l3deditor::Bom::Component_Prototype_CUnits >(cunits_);
}
inline ::l3deditor::Bom::Component_Prototype_CUnits Component_Prototype::cunits() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Component.Prototype.cunits)
  return _internal_cunits();
}
inline void Component_Prototype::_internal_set_cunits(::l3deditor::Bom::Component_Prototype_CUnits value) {
  
  cunits_ = value;
}
inline void Component_Prototype::set_cunits(::l3deditor::Bom::Component_Prototype_CUnits value) {
  _internal_set_cunits(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.Component.Prototype.cunits)
}

// string rootnodeId = 2;
inline void Component_Prototype::clear_rootnodeid() {
  rootnodeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Component_Prototype::rootnodeid() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Component.Prototype.rootnodeId)
  return _internal_rootnodeid();
}
inline void Component_Prototype::set_rootnodeid(const std::string& value) {
  _internal_set_rootnodeid(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.Component.Prototype.rootnodeId)
}
inline std::string* Component_Prototype::mutable_rootnodeid() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.Component.Prototype.rootnodeId)
  return _internal_mutable_rootnodeid();
}
inline const std::string& Component_Prototype::_internal_rootnodeid() const {
  return rootnodeid_.Get();
}
inline void Component_Prototype::_internal_set_rootnodeid(const std::string& value) {
  
  rootnodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void Component_Prototype::set_rootnodeid(std::string&& value) {
  
  rootnodeid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Bom.Component.Prototype.rootnodeId)
}
inline void Component_Prototype::set_rootnodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rootnodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Bom.Component.Prototype.rootnodeId)
}
inline void Component_Prototype::set_rootnodeid(const char* value,
    size_t size) {
  
  rootnodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Bom.Component.Prototype.rootnodeId)
}
inline std::string* Component_Prototype::_internal_mutable_rootnodeid() {
  
  return rootnodeid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Component_Prototype::release_rootnodeid() {
  // @@protoc_insertion_point(field_release:l3deditor.Bom.Component.Prototype.rootnodeId)
  
  return rootnodeid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Component_Prototype::set_allocated_rootnodeid(std::string* rootnodeid) {
  if (rootnodeid != nullptr) {
    
  } else {
    
  }
  rootnodeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rootnodeid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Bom.Component.Prototype.rootnodeId)
}
inline std::string* Component_Prototype::unsafe_arena_release_rootnodeid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Bom.Component.Prototype.rootnodeId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return rootnodeid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Component_Prototype::unsafe_arena_set_allocated_rootnodeid(
    std::string* rootnodeid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (rootnodeid != nullptr) {
    
  } else {
    
  }
  rootnodeid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rootnodeid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Bom.Component.Prototype.rootnodeId)
}

// repeated string childinsId = 3;
inline int Component_Prototype::_internal_childinsid_size() const {
  return childinsid_.size();
}
inline int Component_Prototype::childinsid_size() const {
  return _internal_childinsid_size();
}
inline void Component_Prototype::clear_childinsid() {
  childinsid_.Clear();
}
inline std::string* Component_Prototype::add_childinsid() {
  // @@protoc_insertion_point(field_add_mutable:l3deditor.Bom.Component.Prototype.childinsId)
  return _internal_add_childinsid();
}
inline const std::string& Component_Prototype::_internal_childinsid(int index) const {
  return childinsid_.Get(index);
}
inline const std::string& Component_Prototype::childinsid(int index) const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Component.Prototype.childinsId)
  return _internal_childinsid(index);
}
inline std::string* Component_Prototype::mutable_childinsid(int index) {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.Component.Prototype.childinsId)
  return childinsid_.Mutable(index);
}
inline void Component_Prototype::set_childinsid(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:l3deditor.Bom.Component.Prototype.childinsId)
  childinsid_.Mutable(index)->assign(value);
}
inline void Component_Prototype::set_childinsid(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:l3deditor.Bom.Component.Prototype.childinsId)
  childinsid_.Mutable(index)->assign(std::move(value));
}
inline void Component_Prototype::set_childinsid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  childinsid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:l3deditor.Bom.Component.Prototype.childinsId)
}
inline void Component_Prototype::set_childinsid(int index, const char* value, size_t size) {
  childinsid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Bom.Component.Prototype.childinsId)
}
inline std::string* Component_Prototype::_internal_add_childinsid() {
  return childinsid_.Add();
}
inline void Component_Prototype::add_childinsid(const std::string& value) {
  childinsid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:l3deditor.Bom.Component.Prototype.childinsId)
}
inline void Component_Prototype::add_childinsid(std::string&& value) {
  childinsid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:l3deditor.Bom.Component.Prototype.childinsId)
}
inline void Component_Prototype::add_childinsid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  childinsid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:l3deditor.Bom.Component.Prototype.childinsId)
}
inline void Component_Prototype::add_childinsid(const char* value, size_t size) {
  childinsid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:l3deditor.Bom.Component.Prototype.childinsId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Component_Prototype::childinsid() const {
  // @@protoc_insertion_point(field_list:l3deditor.Bom.Component.Prototype.childinsId)
  return childinsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Component_Prototype::mutable_childinsid() {
  // @@protoc_insertion_point(field_mutable_list:l3deditor.Bom.Component.Prototype.childinsId)
  return &childinsid_;
}

// -------------------------------------------------------------------

// Component_Instant

// string prototypeId = 1;
inline void Component_Instant::clear_prototypeid() {
  prototypeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Component_Instant::prototypeid() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Component.Instant.prototypeId)
  return _internal_prototypeid();
}
inline void Component_Instant::set_prototypeid(const std::string& value) {
  _internal_set_prototypeid(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.Component.Instant.prototypeId)
}
inline std::string* Component_Instant::mutable_prototypeid() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.Component.Instant.prototypeId)
  return _internal_mutable_prototypeid();
}
inline const std::string& Component_Instant::_internal_prototypeid() const {
  return prototypeid_.Get();
}
inline void Component_Instant::_internal_set_prototypeid(const std::string& value) {
  
  prototypeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void Component_Instant::set_prototypeid(std::string&& value) {
  
  prototypeid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Bom.Component.Instant.prototypeId)
}
inline void Component_Instant::set_prototypeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prototypeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Bom.Component.Instant.prototypeId)
}
inline void Component_Instant::set_prototypeid(const char* value,
    size_t size) {
  
  prototypeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Bom.Component.Instant.prototypeId)
}
inline std::string* Component_Instant::_internal_mutable_prototypeid() {
  
  return prototypeid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Component_Instant::release_prototypeid() {
  // @@protoc_insertion_point(field_release:l3deditor.Bom.Component.Instant.prototypeId)
  
  return prototypeid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Component_Instant::set_allocated_prototypeid(std::string* prototypeid) {
  if (prototypeid != nullptr) {
    
  } else {
    
  }
  prototypeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prototypeid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Bom.Component.Instant.prototypeId)
}
inline std::string* Component_Instant::unsafe_arena_release_prototypeid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Bom.Component.Instant.prototypeId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return prototypeid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Component_Instant::unsafe_arena_set_allocated_prototypeid(
    std::string* prototypeid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (prototypeid != nullptr) {
    
  } else {
    
  }
  prototypeid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      prototypeid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Bom.Component.Instant.prototypeId)
}

// string plcId = 2;
inline void Component_Instant::clear_plcid() {
  plcid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Component_Instant::plcid() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Component.Instant.plcId)
  return _internal_plcid();
}
inline void Component_Instant::set_plcid(const std::string& value) {
  _internal_set_plcid(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.Component.Instant.plcId)
}
inline std::string* Component_Instant::mutable_plcid() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.Component.Instant.plcId)
  return _internal_mutable_plcid();
}
inline const std::string& Component_Instant::_internal_plcid() const {
  return plcid_.Get();
}
inline void Component_Instant::_internal_set_plcid(const std::string& value) {
  
  plcid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void Component_Instant::set_plcid(std::string&& value) {
  
  plcid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Bom.Component.Instant.plcId)
}
inline void Component_Instant::set_plcid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plcid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Bom.Component.Instant.plcId)
}
inline void Component_Instant::set_plcid(const char* value,
    size_t size) {
  
  plcid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Bom.Component.Instant.plcId)
}
inline std::string* Component_Instant::_internal_mutable_plcid() {
  
  return plcid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Component_Instant::release_plcid() {
  // @@protoc_insertion_point(field_release:l3deditor.Bom.Component.Instant.plcId)
  
  return plcid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Component_Instant::set_allocated_plcid(std::string* plcid) {
  if (plcid != nullptr) {
    
  } else {
    
  }
  plcid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plcid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Bom.Component.Instant.plcId)
}
inline std::string* Component_Instant::unsafe_arena_release_plcid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Bom.Component.Instant.plcId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return plcid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Component_Instant::unsafe_arena_set_allocated_plcid(
    std::string* plcid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (plcid != nullptr) {
    
  } else {
    
  }
  plcid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      plcid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Bom.Component.Instant.plcId)
}

// .l3deditor.Base.Matrix44 transMatrix = 3;
inline bool Component_Instant::_internal_has_transmatrix() const {
  return this != internal_default_instance() && transmatrix_ != nullptr;
}
inline bool Component_Instant::has_transmatrix() const {
  return _internal_has_transmatrix();
}
inline const ::l3deditor::Base::Matrix44& Component_Instant::_internal_transmatrix() const {
  const ::l3deditor::Base::Matrix44* p = transmatrix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::l3deditor::Base::Matrix44*>(
      &::l3deditor::Base::_Matrix44_default_instance_);
}
inline const ::l3deditor::Base::Matrix44& Component_Instant::transmatrix() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Component.Instant.transMatrix)
  return _internal_transmatrix();
}
inline ::l3deditor::Base::Matrix44* Component_Instant::release_transmatrix() {
  auto temp = unsafe_arena_release_transmatrix();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::l3deditor::Base::Matrix44* Component_Instant::unsafe_arena_release_transmatrix() {
  // @@protoc_insertion_point(field_release:l3deditor.Bom.Component.Instant.transMatrix)
  
  ::l3deditor::Base::Matrix44* temp = transmatrix_;
  transmatrix_ = nullptr;
  return temp;
}
inline ::l3deditor::Base::Matrix44* Component_Instant::_internal_mutable_transmatrix() {
  
  if (transmatrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::l3deditor::Base::Matrix44>(GetArenaNoVirtual());
    transmatrix_ = p;
  }
  return transmatrix_;
}
inline ::l3deditor::Base::Matrix44* Component_Instant::mutable_transmatrix() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.Component.Instant.transMatrix)
  return _internal_mutable_transmatrix();
}
inline void Component_Instant::set_allocated_transmatrix(::l3deditor::Base::Matrix44* transmatrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transmatrix_);
  }
  if (transmatrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transmatrix)->GetArena();
    if (message_arena != submessage_arena) {
      transmatrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transmatrix, submessage_arena);
    }
    
  } else {
    
  }
  transmatrix_ = transmatrix;
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Bom.Component.Instant.transMatrix)
}

// .l3deditor.Base.Material material = 4;
inline bool Component_Instant::_internal_has_material() const {
  return this != internal_default_instance() && material_ != nullptr;
}
inline bool Component_Instant::has_material() const {
  return _internal_has_material();
}
inline const ::l3deditor::Base::Material& Component_Instant::_internal_material() const {
  const ::l3deditor::Base::Material* p = material_;
  return p != nullptr ? *p : *reinterpret_cast<const ::l3deditor::Base::Material*>(
      &::l3deditor::Base::_Material_default_instance_);
}
inline const ::l3deditor::Base::Material& Component_Instant::material() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Component.Instant.material)
  return _internal_material();
}
inline ::l3deditor::Base::Material* Component_Instant::release_material() {
  auto temp = unsafe_arena_release_material();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::l3deditor::Base::Material* Component_Instant::unsafe_arena_release_material() {
  // @@protoc_insertion_point(field_release:l3deditor.Bom.Component.Instant.material)
  
  ::l3deditor::Base::Material* temp = material_;
  material_ = nullptr;
  return temp;
}
inline ::l3deditor::Base::Material* Component_Instant::_internal_mutable_material() {
  
  if (material_ == nullptr) {
    auto* p = CreateMaybeMessage<::l3deditor::Base::Material>(GetArenaNoVirtual());
    material_ = p;
  }
  return material_;
}
inline ::l3deditor::Base::Material* Component_Instant::mutable_material() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.Component.Instant.material)
  return _internal_mutable_material();
}
inline void Component_Instant::set_allocated_material(::l3deditor::Base::Material* material) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(material_);
  }
  if (material) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(material)->GetArena();
    if (message_arena != submessage_arena) {
      material = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, material, submessage_arena);
    }
    
  } else {
    
  }
  material_ = material;
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Bom.Component.Instant.material)
}

// -------------------------------------------------------------------

// Component

// map<string, string> _id = 1;
inline int Component::_internal__id_size() const {
  return _id_.size();
}
inline int Component::_id_size() const {
  return _internal__id_size();
}
inline void Component::clear__id() {
  _id_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Component::_internal__id() const {
  return _id_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Component::_id() const {
  // @@protoc_insertion_point(field_map:l3deditor.Bom.Component._id)
  return _internal__id();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Component::_internal_mutable__id() {
  return _id_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Component::mutable__id() {
  // @@protoc_insertion_point(field_mutable_map:l3deditor.Bom.Component._id)
  return _internal_mutable__id();
}

// string name = 2;
inline void Component::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Component::name() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Component.name)
  return _internal_name();
}
inline void Component::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.Component.name)
}
inline std::string* Component::mutable_name() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.Component.name)
  return _internal_mutable_name();
}
inline const std::string& Component::_internal_name() const {
  return name_.Get();
}
inline void Component::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void Component::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Bom.Component.name)
}
inline void Component::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Bom.Component.name)
}
inline void Component::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Bom.Component.name)
}
inline std::string* Component::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Component::release_name() {
  // @@protoc_insertion_point(field_release:l3deditor.Bom.Component.name)
  
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Component::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Bom.Component.name)
}
inline std::string* Component::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Bom.Component.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Component::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Bom.Component.name)
}

// .l3deditor.Bom.Component.CType ctype = 3;
inline void Component::clear_ctype() {
  ctype_ = 0;
}
inline ::l3deditor::Bom::Component_CType Component::_internal_ctype() const {
  return static_cast< ::l3deditor::Bom::Component_CType >(ctype_);
}
inline ::l3deditor::Bom::Component_CType Component::ctype() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Component.ctype)
  return _internal_ctype();
}
inline void Component::_internal_set_ctype(::l3deditor::Bom::Component_CType value) {
  
  ctype_ = value;
}
inline void Component::set_ctype(::l3deditor::Bom::Component_CType value) {
  _internal_set_ctype(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.Component.ctype)
}

// .l3deditor.Bom.Component.Prototype prototype = 4;
inline bool Component::_internal_has_prototype() const {
  return comp_oneof_case() == kPrototype;
}
inline bool Component::has_prototype() const {
  return _internal_has_prototype();
}
inline void Component::set_has_prototype() {
  _oneof_case_[0] = kPrototype;
}
inline void Component::clear_prototype() {
  if (_internal_has_prototype()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete comp_oneof_.prototype_;
    }
    clear_has_comp_oneof();
  }
}
inline ::l3deditor::Bom::Component_Prototype* Component::release_prototype() {
  // @@protoc_insertion_point(field_release:l3deditor.Bom.Component.prototype)
  if (_internal_has_prototype()) {
    clear_has_comp_oneof();
      ::l3deditor::Bom::Component_Prototype* temp = comp_oneof_.prototype_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    comp_oneof_.prototype_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::l3deditor::Bom::Component_Prototype& Component::_internal_prototype() const {
  return _internal_has_prototype()
      ? *comp_oneof_.prototype_
      : *reinterpret_cast< ::l3deditor::Bom::Component_Prototype*>(&::l3deditor::Bom::_Component_Prototype_default_instance_);
}
inline const ::l3deditor::Bom::Component_Prototype& Component::prototype() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Component.prototype)
  return _internal_prototype();
}
inline ::l3deditor::Bom::Component_Prototype* Component::unsafe_arena_release_prototype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Bom.Component.prototype)
  if (_internal_has_prototype()) {
    clear_has_comp_oneof();
    ::l3deditor::Bom::Component_Prototype* temp = comp_oneof_.prototype_;
    comp_oneof_.prototype_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Component::unsafe_arena_set_allocated_prototype(::l3deditor::Bom::Component_Prototype* prototype) {
  clear_comp_oneof();
  if (prototype) {
    set_has_prototype();
    comp_oneof_.prototype_ = prototype;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Bom.Component.prototype)
}
inline ::l3deditor::Bom::Component_Prototype* Component::_internal_mutable_prototype() {
  if (!_internal_has_prototype()) {
    clear_comp_oneof();
    set_has_prototype();
    comp_oneof_.prototype_ = CreateMaybeMessage< ::l3deditor::Bom::Component_Prototype >(
        GetArenaNoVirtual());
  }
  return comp_oneof_.prototype_;
}
inline ::l3deditor::Bom::Component_Prototype* Component::mutable_prototype() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.Component.prototype)
  return _internal_mutable_prototype();
}

// .l3deditor.Bom.Component.Instant instant = 5;
inline bool Component::_internal_has_instant() const {
  return comp_oneof_case() == kInstant;
}
inline bool Component::has_instant() const {
  return _internal_has_instant();
}
inline void Component::set_has_instant() {
  _oneof_case_[0] = kInstant;
}
inline void Component::clear_instant() {
  if (_internal_has_instant()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete comp_oneof_.instant_;
    }
    clear_has_comp_oneof();
  }
}
inline ::l3deditor::Bom::Component_Instant* Component::release_instant() {
  // @@protoc_insertion_point(field_release:l3deditor.Bom.Component.instant)
  if (_internal_has_instant()) {
    clear_has_comp_oneof();
      ::l3deditor::Bom::Component_Instant* temp = comp_oneof_.instant_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    comp_oneof_.instant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::l3deditor::Bom::Component_Instant& Component::_internal_instant() const {
  return _internal_has_instant()
      ? *comp_oneof_.instant_
      : *reinterpret_cast< ::l3deditor::Bom::Component_Instant*>(&::l3deditor::Bom::_Component_Instant_default_instance_);
}
inline const ::l3deditor::Bom::Component_Instant& Component::instant() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Component.instant)
  return _internal_instant();
}
inline ::l3deditor::Bom::Component_Instant* Component::unsafe_arena_release_instant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Bom.Component.instant)
  if (_internal_has_instant()) {
    clear_has_comp_oneof();
    ::l3deditor::Bom::Component_Instant* temp = comp_oneof_.instant_;
    comp_oneof_.instant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Component::unsafe_arena_set_allocated_instant(::l3deditor::Bom::Component_Instant* instant) {
  clear_comp_oneof();
  if (instant) {
    set_has_instant();
    comp_oneof_.instant_ = instant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Bom.Component.instant)
}
inline ::l3deditor::Bom::Component_Instant* Component::_internal_mutable_instant() {
  if (!_internal_has_instant()) {
    clear_comp_oneof();
    set_has_instant();
    comp_oneof_.instant_ = CreateMaybeMessage< ::l3deditor::Bom::Component_Instant >(
        GetArenaNoVirtual());
  }
  return comp_oneof_.instant_;
}
inline ::l3deditor::Bom::Component_Instant* Component::mutable_instant() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.Component.instant)
  return _internal_mutable_instant();
}

// .l3deditor.Base.DrawStyle drawStyle = 6;
inline void Component::clear_drawstyle() {
  drawstyle_ = 0;
}
inline ::l3deditor::Base::DrawStyle Component::_internal_drawstyle() const {
  return static_cast< ::l3deditor::Base::DrawStyle >(drawstyle_);
}
inline ::l3deditor::Base::DrawStyle Component::drawstyle() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Component.drawStyle)
  return _internal_drawstyle();
}
inline void Component::_internal_set_drawstyle(::l3deditor::Base::DrawStyle value) {
  
  drawstyle_ = value;
}
inline void Component::set_drawstyle(::l3deditor::Base::DrawStyle value) {
  _internal_set_drawstyle(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.Component.drawStyle)
}

// repeated .l3deditor.Bom.AnyValue property = 10;
inline int Component::_internal_property_size() const {
  return property_.size();
}
inline int Component::property_size() const {
  return _internal_property_size();
}
inline void Component::clear_property() {
  property_.Clear();
}
inline ::l3deditor::Bom::AnyValue* Component::mutable_property(int index) {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.Component.property)
  return property_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::l3deditor::Bom::AnyValue >*
Component::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:l3deditor.Bom.Component.property)
  return &property_;
}
inline const ::l3deditor::Bom::AnyValue& Component::_internal_property(int index) const {
  return property_.Get(index);
}
inline const ::l3deditor::Bom::AnyValue& Component::property(int index) const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Component.property)
  return _internal_property(index);
}
inline ::l3deditor::Bom::AnyValue* Component::_internal_add_property() {
  return property_.Add();
}
inline ::l3deditor::Bom::AnyValue* Component::add_property() {
  // @@protoc_insertion_point(field_add:l3deditor.Bom.Component.property)
  return _internal_add_property();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::l3deditor::Bom::AnyValue >&
Component::property() const {
  // @@protoc_insertion_point(field_list:l3deditor.Bom.Component.property)
  return property_;
}

inline bool Component::has_comp_oneof() const {
  return comp_oneof_case() != COMP_ONEOF_NOT_SET;
}
inline void Component::clear_has_comp_oneof() {
  _oneof_case_[0] = COMP_ONEOF_NOT_SET;
}
inline Component::CompOneofCase Component::comp_oneof_case() const {
  return Component::CompOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InsFeature

// string insPath = 1;
inline void InsFeature::clear_inspath() {
  inspath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& InsFeature::inspath() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.InsFeature.insPath)
  return _internal_inspath();
}
inline void InsFeature::set_inspath(const std::string& value) {
  _internal_set_inspath(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.InsFeature.insPath)
}
inline std::string* InsFeature::mutable_inspath() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.InsFeature.insPath)
  return _internal_mutable_inspath();
}
inline const std::string& InsFeature::_internal_inspath() const {
  return inspath_.Get();
}
inline void InsFeature::_internal_set_inspath(const std::string& value) {
  
  inspath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void InsFeature::set_inspath(std::string&& value) {
  
  inspath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Bom.InsFeature.insPath)
}
inline void InsFeature::set_inspath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inspath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Bom.InsFeature.insPath)
}
inline void InsFeature::set_inspath(const char* value,
    size_t size) {
  
  inspath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Bom.InsFeature.insPath)
}
inline std::string* InsFeature::_internal_mutable_inspath() {
  
  return inspath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* InsFeature::release_inspath() {
  // @@protoc_insertion_point(field_release:l3deditor.Bom.InsFeature.insPath)
  
  return inspath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void InsFeature::set_allocated_inspath(std::string* inspath) {
  if (inspath != nullptr) {
    
  } else {
    
  }
  inspath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inspath,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Bom.InsFeature.insPath)
}
inline std::string* InsFeature::unsafe_arena_release_inspath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Bom.InsFeature.insPath)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return inspath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void InsFeature::unsafe_arena_set_allocated_inspath(
    std::string* inspath) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (inspath != nullptr) {
    
  } else {
    
  }
  inspath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      inspath, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Bom.InsFeature.insPath)
}

// repeated string insUid = 2;
inline int InsFeature::_internal_insuid_size() const {
  return insuid_.size();
}
inline int InsFeature::insuid_size() const {
  return _internal_insuid_size();
}
inline void InsFeature::clear_insuid() {
  insuid_.Clear();
}
inline std::string* InsFeature::add_insuid() {
  // @@protoc_insertion_point(field_add_mutable:l3deditor.Bom.InsFeature.insUid)
  return _internal_add_insuid();
}
inline const std::string& InsFeature::_internal_insuid(int index) const {
  return insuid_.Get(index);
}
inline const std::string& InsFeature::insuid(int index) const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.InsFeature.insUid)
  return _internal_insuid(index);
}
inline std::string* InsFeature::mutable_insuid(int index) {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.InsFeature.insUid)
  return insuid_.Mutable(index);
}
inline void InsFeature::set_insuid(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:l3deditor.Bom.InsFeature.insUid)
  insuid_.Mutable(index)->assign(value);
}
inline void InsFeature::set_insuid(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:l3deditor.Bom.InsFeature.insUid)
  insuid_.Mutable(index)->assign(std::move(value));
}
inline void InsFeature::set_insuid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  insuid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:l3deditor.Bom.InsFeature.insUid)
}
inline void InsFeature::set_insuid(int index, const char* value, size_t size) {
  insuid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Bom.InsFeature.insUid)
}
inline std::string* InsFeature::_internal_add_insuid() {
  return insuid_.Add();
}
inline void InsFeature::add_insuid(const std::string& value) {
  insuid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:l3deditor.Bom.InsFeature.insUid)
}
inline void InsFeature::add_insuid(std::string&& value) {
  insuid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:l3deditor.Bom.InsFeature.insUid)
}
inline void InsFeature::add_insuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  insuid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:l3deditor.Bom.InsFeature.insUid)
}
inline void InsFeature::add_insuid(const char* value, size_t size) {
  insuid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:l3deditor.Bom.InsFeature.insUid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InsFeature::insuid() const {
  // @@protoc_insertion_point(field_list:l3deditor.Bom.InsFeature.insUid)
  return insuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InsFeature::mutable_insuid() {
  // @@protoc_insertion_point(field_mutable_list:l3deditor.Bom.InsFeature.insUid)
  return &insuid_;
}

// .l3deditor.Base.DrawStyle drawStyle = 3;
inline void InsFeature::clear_drawstyle() {
  drawstyle_ = 0;
}
inline ::l3deditor::Base::DrawStyle InsFeature::_internal_drawstyle() const {
  return static_cast< ::l3deditor::Base::DrawStyle >(drawstyle_);
}
inline ::l3deditor::Base::DrawStyle InsFeature::drawstyle() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.InsFeature.drawStyle)
  return _internal_drawstyle();
}
inline void InsFeature::_internal_set_drawstyle(::l3deditor::Base::DrawStyle value) {
  
  drawstyle_ = value;
}
inline void InsFeature::set_drawstyle(::l3deditor::Base::DrawStyle value) {
  _internal_set_drawstyle(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.InsFeature.drawStyle)
}

// .l3deditor.Base.Material material = 4;
inline bool InsFeature::_internal_has_material() const {
  return this != internal_default_instance() && material_ != nullptr;
}
inline bool InsFeature::has_material() const {
  return _internal_has_material();
}
inline const ::l3deditor::Base::Material& InsFeature::_internal_material() const {
  const ::l3deditor::Base::Material* p = material_;
  return p != nullptr ? *p : *reinterpret_cast<const ::l3deditor::Base::Material*>(
      &::l3deditor::Base::_Material_default_instance_);
}
inline const ::l3deditor::Base::Material& InsFeature::material() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.InsFeature.material)
  return _internal_material();
}
inline ::l3deditor::Base::Material* InsFeature::release_material() {
  auto temp = unsafe_arena_release_material();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::l3deditor::Base::Material* InsFeature::unsafe_arena_release_material() {
  // @@protoc_insertion_point(field_release:l3deditor.Bom.InsFeature.material)
  
  ::l3deditor::Base::Material* temp = material_;
  material_ = nullptr;
  return temp;
}
inline ::l3deditor::Base::Material* InsFeature::_internal_mutable_material() {
  
  if (material_ == nullptr) {
    auto* p = CreateMaybeMessage<::l3deditor::Base::Material>(GetArenaNoVirtual());
    material_ = p;
  }
  return material_;
}
inline ::l3deditor::Base::Material* InsFeature::mutable_material() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.InsFeature.material)
  return _internal_mutable_material();
}
inline void InsFeature::set_allocated_material(::l3deditor::Base::Material* material) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(material_);
  }
  if (material) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(material)->GetArena();
    if (message_arena != submessage_arena) {
      material = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, material, submessage_arena);
    }
    
  } else {
    
  }
  material_ = material;
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Bom.InsFeature.material)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Document

// map<string, string> _id = 1;
inline int Document::_internal__id_size() const {
  return _id_.size();
}
inline int Document::_id_size() const {
  return _internal__id_size();
}
inline void Document::clear__id() {
  _id_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Document::_internal__id() const {
  return _id_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Document::_id() const {
  // @@protoc_insertion_point(field_map:l3deditor.Bom.Document._id)
  return _internal__id();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Document::_internal_mutable__id() {
  return _id_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Document::mutable__id() {
  // @@protoc_insertion_point(field_mutable_map:l3deditor.Bom.Document._id)
  return _internal_mutable__id();
}

// string name = 2;
inline void Document::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Document::name() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Document.name)
  return _internal_name();
}
inline void Document::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.Document.name)
}
inline std::string* Document::mutable_name() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.Document.name)
  return _internal_mutable_name();
}
inline const std::string& Document::_internal_name() const {
  return name_.Get();
}
inline void Document::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void Document::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Bom.Document.name)
}
inline void Document::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Bom.Document.name)
}
inline void Document::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Bom.Document.name)
}
inline std::string* Document::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Document::release_name() {
  // @@protoc_insertion_point(field_release:l3deditor.Bom.Document.name)
  
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Document::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Bom.Document.name)
}
inline std::string* Document::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Bom.Document.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Document::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Bom.Document.name)
}

// repeated string topprotoIds = 3;
inline int Document::_internal_topprotoids_size() const {
  return topprotoids_.size();
}
inline int Document::topprotoids_size() const {
  return _internal_topprotoids_size();
}
inline void Document::clear_topprotoids() {
  topprotoids_.Clear();
}
inline std::string* Document::add_topprotoids() {
  // @@protoc_insertion_point(field_add_mutable:l3deditor.Bom.Document.topprotoIds)
  return _internal_add_topprotoids();
}
inline const std::string& Document::_internal_topprotoids(int index) const {
  return topprotoids_.Get(index);
}
inline const std::string& Document::topprotoids(int index) const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Document.topprotoIds)
  return _internal_topprotoids(index);
}
inline std::string* Document::mutable_topprotoids(int index) {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.Document.topprotoIds)
  return topprotoids_.Mutable(index);
}
inline void Document::set_topprotoids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:l3deditor.Bom.Document.topprotoIds)
  topprotoids_.Mutable(index)->assign(value);
}
inline void Document::set_topprotoids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:l3deditor.Bom.Document.topprotoIds)
  topprotoids_.Mutable(index)->assign(std::move(value));
}
inline void Document::set_topprotoids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topprotoids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:l3deditor.Bom.Document.topprotoIds)
}
inline void Document::set_topprotoids(int index, const char* value, size_t size) {
  topprotoids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Bom.Document.topprotoIds)
}
inline std::string* Document::_internal_add_topprotoids() {
  return topprotoids_.Add();
}
inline void Document::add_topprotoids(const std::string& value) {
  topprotoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:l3deditor.Bom.Document.topprotoIds)
}
inline void Document::add_topprotoids(std::string&& value) {
  topprotoids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:l3deditor.Bom.Document.topprotoIds)
}
inline void Document::add_topprotoids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topprotoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:l3deditor.Bom.Document.topprotoIds)
}
inline void Document::add_topprotoids(const char* value, size_t size) {
  topprotoids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:l3deditor.Bom.Document.topprotoIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Document::topprotoids() const {
  // @@protoc_insertion_point(field_list:l3deditor.Bom.Document.topprotoIds)
  return topprotoids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Document::mutable_topprotoids() {
  // @@protoc_insertion_point(field_mutable_list:l3deditor.Bom.Document.topprotoIds)
  return &topprotoids_;
}

// map<uint32, .l3deditor.Bom.InsFeature> insFeature = 4;
inline int Document::_internal_insfeature_size() const {
  return insfeature_.size();
}
inline int Document::insfeature_size() const {
  return _internal_insfeature_size();
}
inline void Document::clear_insfeature() {
  insfeature_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::l3deditor::Bom::InsFeature >&
Document::_internal_insfeature() const {
  return insfeature_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::l3deditor::Bom::InsFeature >&
Document::insfeature() const {
  // @@protoc_insertion_point(field_map:l3deditor.Bom.Document.insFeature)
  return _internal_insfeature();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::l3deditor::Bom::InsFeature >*
Document::_internal_mutable_insfeature() {
  return insfeature_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::l3deditor::Bom::InsFeature >*
Document::mutable_insfeature() {
  // @@protoc_insertion_point(field_mutable_map:l3deditor.Bom.Document.insFeature)
  return _internal_mutable_insfeature();
}

// string fileName = 5;
inline void Document::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Document::filename() const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Document.fileName)
  return _internal_filename();
}
inline void Document::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:l3deditor.Bom.Document.fileName)
}
inline std::string* Document::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.Document.fileName)
  return _internal_mutable_filename();
}
inline const std::string& Document::_internal_filename() const {
  return filename_.Get();
}
inline void Document::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void Document::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Bom.Document.fileName)
}
inline void Document::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Bom.Document.fileName)
}
inline void Document::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Bom.Document.fileName)
}
inline std::string* Document::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Document::release_filename() {
  // @@protoc_insertion_point(field_release:l3deditor.Bom.Document.fileName)
  
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Document::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Bom.Document.fileName)
}
inline std::string* Document::unsafe_arena_release_filename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Bom.Document.fileName)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return filename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Document::unsafe_arena_set_allocated_filename(
    std::string* filename) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filename, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Bom.Document.fileName)
}

// repeated .l3deditor.Bom.AnyValue fileInfo = 6;
inline int Document::_internal_fileinfo_size() const {
  return fileinfo_.size();
}
inline int Document::fileinfo_size() const {
  return _internal_fileinfo_size();
}
inline void Document::clear_fileinfo() {
  fileinfo_.Clear();
}
inline ::l3deditor::Bom::AnyValue* Document::mutable_fileinfo(int index) {
  // @@protoc_insertion_point(field_mutable:l3deditor.Bom.Document.fileInfo)
  return fileinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::l3deditor::Bom::AnyValue >*
Document::mutable_fileinfo() {
  // @@protoc_insertion_point(field_mutable_list:l3deditor.Bom.Document.fileInfo)
  return &fileinfo_;
}
inline const ::l3deditor::Bom::AnyValue& Document::_internal_fileinfo(int index) const {
  return fileinfo_.Get(index);
}
inline const ::l3deditor::Bom::AnyValue& Document::fileinfo(int index) const {
  // @@protoc_insertion_point(field_get:l3deditor.Bom.Document.fileInfo)
  return _internal_fileinfo(index);
}
inline ::l3deditor::Bom::AnyValue* Document::_internal_add_fileinfo() {
  return fileinfo_.Add();
}
inline ::l3deditor::Bom::AnyValue* Document::add_fileinfo() {
  // @@protoc_insertion_point(field_add:l3deditor.Bom.Document.fileInfo)
  return _internal_add_fileinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::l3deditor::Bom::AnyValue >&
Document::fileinfo() const {
  // @@protoc_insertion_point(field_list:l3deditor.Bom.Document.fileInfo)
  return fileinfo_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Bom
}  // namespace l3deditor

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::l3deditor::Bom::Component_Prototype_CUnits> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::l3deditor::Bom::Component_Prototype_CUnits>() {
  return ::l3deditor::Bom::Component_Prototype_CUnits_descriptor();
}
template <> struct is_proto_enum< ::l3deditor::Bom::Component_CType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::l3deditor::Bom::Component_CType>() {
  return ::l3deditor::Bom::Component_CType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bom_2eproto
