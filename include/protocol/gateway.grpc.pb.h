// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gateway.proto
// Original file comments:
// *********************************************************
// 		Created on 2019/12/16 By zhouyunpeng
// 	版权所有(C) 2019 L3DEditorOnline Group
//
// 	Function:
// 		网关服务定义
// 	更新：
//
// ********************************************************
#ifndef GRPC_gateway_2eproto__INCLUDED
#define GRPC_gateway_2eproto__INCLUDED

#include "gateway.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace l3deditor {
namespace Gateway {

class APIService final {
 public:
  static constexpr char const* service_full_name() {
    return "l3deditor.Gateway.APIService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateAppIns(::grpc::ClientContext* context, const ::l3deditor::Gateway::ClinetInfo& request, ::l3deditor::Gateway::ClinetInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Gateway::ClinetInfo>> AsyncCreateAppIns(::grpc::ClientContext* context, const ::l3deditor::Gateway::ClinetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Gateway::ClinetInfo>>(AsyncCreateAppInsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Gateway::ClinetInfo>> PrepareAsyncCreateAppIns(::grpc::ClientContext* context, const ::l3deditor::Gateway::ClinetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Gateway::ClinetInfo>>(PrepareAsyncCreateAppInsRaw(context, request, cq));
    }
    virtual ::grpc::Status CmdRun(::grpc::ClientContext* context, const ::l3deditor::Gateway::CmdRequest& request, ::l3deditor::Base::CommandRet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Base::CommandRet>> AsyncCmdRun(::grpc::ClientContext* context, const ::l3deditor::Gateway::CmdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Base::CommandRet>>(AsyncCmdRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Base::CommandRet>> PrepareAsyncCmdRun(::grpc::ClientContext* context, const ::l3deditor::Gateway::CmdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Base::CommandRet>>(PrepareAsyncCmdRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>> CmdRunbat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>>(CmdRunbatRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>> AsyncCmdRunbat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>>(AsyncCmdRunbatRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>> PrepareAsyncCmdRunbat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>>(PrepareAsyncCmdRunbatRaw(context, cq));
    }
    virtual ::grpc::Status GetBom(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::l3deditor::Gateway::BomResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Gateway::BomResponse>> AsyncGetBom(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Gateway::BomResponse>>(AsyncGetBomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Gateway::BomResponse>> PrepareAsyncGetBom(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Gateway::BomResponse>>(PrepareAsyncGetBomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::l3deditor::Gateway::DocIdStreamingResponse>> ListDocIds(::grpc::ClientContext* context, const ::l3deditor::Gateway::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::l3deditor::Gateway::DocIdStreamingResponse>>(ListDocIdsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::l3deditor::Gateway::DocIdStreamingResponse>> AsyncListDocIds(::grpc::ClientContext* context, const ::l3deditor::Gateway::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::l3deditor::Gateway::DocIdStreamingResponse>>(AsyncListDocIdsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::l3deditor::Gateway::DocIdStreamingResponse>> PrepareAsyncListDocIds(::grpc::ClientContext* context, const ::l3deditor::Gateway::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::l3deditor::Gateway::DocIdStreamingResponse>>(PrepareAsyncListDocIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::l3deditor::Gateway::CompStreamingResponse>> GetChildren(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::l3deditor::Gateway::CompStreamingResponse>>(GetChildrenRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::l3deditor::Gateway::CompStreamingResponse>> AsyncGetChildren(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::l3deditor::Gateway::CompStreamingResponse>>(AsyncGetChildrenRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::l3deditor::Gateway::CompStreamingResponse>> PrepareAsyncGetChildren(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::l3deditor::Gateway::CompStreamingResponse>>(PrepareAsyncGetChildrenRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateAppIns(::grpc::ClientContext* context, const ::l3deditor::Gateway::ClinetInfo* request, ::l3deditor::Gateway::ClinetInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAppIns(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::l3deditor::Gateway::ClinetInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAppIns(::grpc::ClientContext* context, const ::l3deditor::Gateway::ClinetInfo* request, ::l3deditor::Gateway::ClinetInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateAppIns(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::l3deditor::Gateway::ClinetInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CmdRun(::grpc::ClientContext* context, const ::l3deditor::Gateway::CmdRequest* request, ::l3deditor::Base::CommandRet* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CmdRun(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::l3deditor::Base::CommandRet* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CmdRun(::grpc::ClientContext* context, const ::l3deditor::Gateway::CmdRequest* request, ::l3deditor::Base::CommandRet* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CmdRun(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::l3deditor::Base::CommandRet* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CmdRunbat(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::l3deditor::Gateway::CmdRequest,::l3deditor::Base::CommandRet>* reactor) = 0;
      virtual void GetBom(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest* request, ::l3deditor::Gateway::BomResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::l3deditor::Gateway::BomResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBom(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest* request, ::l3deditor::Gateway::BomResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetBom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::l3deditor::Gateway::BomResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListDocIds(::grpc::ClientContext* context, ::l3deditor::Gateway::Empty* request, ::grpc::experimental::ClientReadReactor< ::l3deditor::Gateway::DocIdStreamingResponse>* reactor) = 0;
      virtual void GetChildren(::grpc::ClientContext* context, ::l3deditor::Gateway::BomRequest* request, ::grpc::experimental::ClientReadReactor< ::l3deditor::Gateway::CompStreamingResponse>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Gateway::ClinetInfo>* AsyncCreateAppInsRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::ClinetInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Gateway::ClinetInfo>* PrepareAsyncCreateAppInsRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::ClinetInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Base::CommandRet>* AsyncCmdRunRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::CmdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Base::CommandRet>* PrepareAsyncCmdRunRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::CmdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>* CmdRunbatRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>* AsyncCmdRunbatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>* PrepareAsyncCmdRunbatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Gateway::BomResponse>* AsyncGetBomRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::l3deditor::Gateway::BomResponse>* PrepareAsyncGetBomRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::l3deditor::Gateway::DocIdStreamingResponse>* ListDocIdsRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::l3deditor::Gateway::DocIdStreamingResponse>* AsyncListDocIdsRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::l3deditor::Gateway::DocIdStreamingResponse>* PrepareAsyncListDocIdsRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::l3deditor::Gateway::CompStreamingResponse>* GetChildrenRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::l3deditor::Gateway::CompStreamingResponse>* AsyncGetChildrenRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::l3deditor::Gateway::CompStreamingResponse>* PrepareAsyncGetChildrenRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateAppIns(::grpc::ClientContext* context, const ::l3deditor::Gateway::ClinetInfo& request, ::l3deditor::Gateway::ClinetInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::l3deditor::Gateway::ClinetInfo>> AsyncCreateAppIns(::grpc::ClientContext* context, const ::l3deditor::Gateway::ClinetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::l3deditor::Gateway::ClinetInfo>>(AsyncCreateAppInsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::l3deditor::Gateway::ClinetInfo>> PrepareAsyncCreateAppIns(::grpc::ClientContext* context, const ::l3deditor::Gateway::ClinetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::l3deditor::Gateway::ClinetInfo>>(PrepareAsyncCreateAppInsRaw(context, request, cq));
    }
    ::grpc::Status CmdRun(::grpc::ClientContext* context, const ::l3deditor::Gateway::CmdRequest& request, ::l3deditor::Base::CommandRet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::l3deditor::Base::CommandRet>> AsyncCmdRun(::grpc::ClientContext* context, const ::l3deditor::Gateway::CmdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::l3deditor::Base::CommandRet>>(AsyncCmdRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::l3deditor::Base::CommandRet>> PrepareAsyncCmdRun(::grpc::ClientContext* context, const ::l3deditor::Gateway::CmdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::l3deditor::Base::CommandRet>>(PrepareAsyncCmdRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>> CmdRunbat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>>(CmdRunbatRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>> AsyncCmdRunbat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>>(AsyncCmdRunbatRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>> PrepareAsyncCmdRunbat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>>(PrepareAsyncCmdRunbatRaw(context, cq));
    }
    ::grpc::Status GetBom(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::l3deditor::Gateway::BomResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::l3deditor::Gateway::BomResponse>> AsyncGetBom(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::l3deditor::Gateway::BomResponse>>(AsyncGetBomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::l3deditor::Gateway::BomResponse>> PrepareAsyncGetBom(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::l3deditor::Gateway::BomResponse>>(PrepareAsyncGetBomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::l3deditor::Gateway::DocIdStreamingResponse>> ListDocIds(::grpc::ClientContext* context, const ::l3deditor::Gateway::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::l3deditor::Gateway::DocIdStreamingResponse>>(ListDocIdsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::l3deditor::Gateway::DocIdStreamingResponse>> AsyncListDocIds(::grpc::ClientContext* context, const ::l3deditor::Gateway::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::l3deditor::Gateway::DocIdStreamingResponse>>(AsyncListDocIdsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::l3deditor::Gateway::DocIdStreamingResponse>> PrepareAsyncListDocIds(::grpc::ClientContext* context, const ::l3deditor::Gateway::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::l3deditor::Gateway::DocIdStreamingResponse>>(PrepareAsyncListDocIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::l3deditor::Gateway::CompStreamingResponse>> GetChildren(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::l3deditor::Gateway::CompStreamingResponse>>(GetChildrenRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::l3deditor::Gateway::CompStreamingResponse>> AsyncGetChildren(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::l3deditor::Gateway::CompStreamingResponse>>(AsyncGetChildrenRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::l3deditor::Gateway::CompStreamingResponse>> PrepareAsyncGetChildren(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::l3deditor::Gateway::CompStreamingResponse>>(PrepareAsyncGetChildrenRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateAppIns(::grpc::ClientContext* context, const ::l3deditor::Gateway::ClinetInfo* request, ::l3deditor::Gateway::ClinetInfo* response, std::function<void(::grpc::Status)>) override;
      void CreateAppIns(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::l3deditor::Gateway::ClinetInfo* response, std::function<void(::grpc::Status)>) override;
      void CreateAppIns(::grpc::ClientContext* context, const ::l3deditor::Gateway::ClinetInfo* request, ::l3deditor::Gateway::ClinetInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateAppIns(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::l3deditor::Gateway::ClinetInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CmdRun(::grpc::ClientContext* context, const ::l3deditor::Gateway::CmdRequest* request, ::l3deditor::Base::CommandRet* response, std::function<void(::grpc::Status)>) override;
      void CmdRun(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::l3deditor::Base::CommandRet* response, std::function<void(::grpc::Status)>) override;
      void CmdRun(::grpc::ClientContext* context, const ::l3deditor::Gateway::CmdRequest* request, ::l3deditor::Base::CommandRet* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CmdRun(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::l3deditor::Base::CommandRet* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CmdRunbat(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::l3deditor::Gateway::CmdRequest,::l3deditor::Base::CommandRet>* reactor) override;
      void GetBom(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest* request, ::l3deditor::Gateway::BomResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::l3deditor::Gateway::BomResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBom(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest* request, ::l3deditor::Gateway::BomResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetBom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::l3deditor::Gateway::BomResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListDocIds(::grpc::ClientContext* context, ::l3deditor::Gateway::Empty* request, ::grpc::experimental::ClientReadReactor< ::l3deditor::Gateway::DocIdStreamingResponse>* reactor) override;
      void GetChildren(::grpc::ClientContext* context, ::l3deditor::Gateway::BomRequest* request, ::grpc::experimental::ClientReadReactor< ::l3deditor::Gateway::CompStreamingResponse>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::l3deditor::Gateway::ClinetInfo>* AsyncCreateAppInsRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::ClinetInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::l3deditor::Gateway::ClinetInfo>* PrepareAsyncCreateAppInsRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::ClinetInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::l3deditor::Base::CommandRet>* AsyncCmdRunRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::CmdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::l3deditor::Base::CommandRet>* PrepareAsyncCmdRunRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::CmdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>* CmdRunbatRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>* AsyncCmdRunbatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>* PrepareAsyncCmdRunbatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::l3deditor::Gateway::BomResponse>* AsyncGetBomRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::l3deditor::Gateway::BomResponse>* PrepareAsyncGetBomRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::l3deditor::Gateway::DocIdStreamingResponse>* ListDocIdsRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::Empty& request) override;
    ::grpc::ClientAsyncReader< ::l3deditor::Gateway::DocIdStreamingResponse>* AsyncListDocIdsRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::l3deditor::Gateway::DocIdStreamingResponse>* PrepareAsyncListDocIdsRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::l3deditor::Gateway::CompStreamingResponse>* GetChildrenRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request) override;
    ::grpc::ClientAsyncReader< ::l3deditor::Gateway::CompStreamingResponse>* AsyncGetChildrenRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::l3deditor::Gateway::CompStreamingResponse>* PrepareAsyncGetChildrenRaw(::grpc::ClientContext* context, const ::l3deditor::Gateway::BomRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAppIns_;
    const ::grpc::internal::RpcMethod rpcmethod_CmdRun_;
    const ::grpc::internal::RpcMethod rpcmethod_CmdRunbat_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBom_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDocIds_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChildren_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateAppIns(::grpc::ServerContext* context, const ::l3deditor::Gateway::ClinetInfo* request, ::l3deditor::Gateway::ClinetInfo* response);
    virtual ::grpc::Status CmdRun(::grpc::ServerContext* context, const ::l3deditor::Gateway::CmdRequest* request, ::l3deditor::Base::CommandRet* response);
    virtual ::grpc::Status CmdRunbat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::l3deditor::Base::CommandRet, ::l3deditor::Gateway::CmdRequest>* stream);
    virtual ::grpc::Status GetBom(::grpc::ServerContext* context, const ::l3deditor::Gateway::BomRequest* request, ::l3deditor::Gateway::BomResponse* response);
    virtual ::grpc::Status ListDocIds(::grpc::ServerContext* context, const ::l3deditor::Gateway::Empty* request, ::grpc::ServerWriter< ::l3deditor::Gateway::DocIdStreamingResponse>* writer);
    virtual ::grpc::Status GetChildren(::grpc::ServerContext* context, const ::l3deditor::Gateway::BomRequest* request, ::grpc::ServerWriter< ::l3deditor::Gateway::CompStreamingResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAppIns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAppIns() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateAppIns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAppIns(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::ClinetInfo* /*request*/, ::l3deditor::Gateway::ClinetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAppIns(::grpc::ServerContext* context, ::l3deditor::Gateway::ClinetInfo* request, ::grpc::ServerAsyncResponseWriter< ::l3deditor::Gateway::ClinetInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CmdRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CmdRun() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CmdRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CmdRun(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::CmdRequest* /*request*/, ::l3deditor::Base::CommandRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCmdRun(::grpc::ServerContext* context, ::l3deditor::Gateway::CmdRequest* request, ::grpc::ServerAsyncResponseWriter< ::l3deditor::Base::CommandRet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CmdRunbat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CmdRunbat() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CmdRunbat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CmdRunbat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::l3deditor::Base::CommandRet, ::l3deditor::Gateway::CmdRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCmdRunbat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::l3deditor::Base::CommandRet, ::l3deditor::Gateway::CmdRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBom() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetBom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBom(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::BomRequest* /*request*/, ::l3deditor::Gateway::BomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBom(::grpc::ServerContext* context, ::l3deditor::Gateway::BomRequest* request, ::grpc::ServerAsyncResponseWriter< ::l3deditor::Gateway::BomResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDocIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDocIds() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListDocIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDocIds(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::Empty* /*request*/, ::grpc::ServerWriter< ::l3deditor::Gateway::DocIdStreamingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDocIds(::grpc::ServerContext* context, ::l3deditor::Gateway::Empty* request, ::grpc::ServerAsyncWriter< ::l3deditor::Gateway::DocIdStreamingResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetChildren() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildren(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::BomRequest* /*request*/, ::grpc::ServerWriter< ::l3deditor::Gateway::CompStreamingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChildren(::grpc::ServerContext* context, ::l3deditor::Gateway::BomRequest* request, ::grpc::ServerAsyncWriter< ::l3deditor::Gateway::CompStreamingResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateAppIns<WithAsyncMethod_CmdRun<WithAsyncMethod_CmdRunbat<WithAsyncMethod_GetBom<WithAsyncMethod_ListDocIds<WithAsyncMethod_GetChildren<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateAppIns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateAppIns() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::l3deditor::Gateway::ClinetInfo, ::l3deditor::Gateway::ClinetInfo>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::l3deditor::Gateway::ClinetInfo* request, ::l3deditor::Gateway::ClinetInfo* response) { return this->CreateAppIns(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAppIns(
        ::grpc::experimental::MessageAllocator< ::l3deditor::Gateway::ClinetInfo, ::l3deditor::Gateway::ClinetInfo>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::l3deditor::Gateway::ClinetInfo, ::l3deditor::Gateway::ClinetInfo>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateAppIns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAppIns(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::ClinetInfo* /*request*/, ::l3deditor::Gateway::ClinetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* CreateAppIns(::grpc::experimental::CallbackServerContext* /*context*/, const ::l3deditor::Gateway::ClinetInfo* /*request*/, ::l3deditor::Gateway::ClinetInfo* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CmdRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CmdRun() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::l3deditor::Gateway::CmdRequest* request, ::l3deditor::Base::CommandRet* response) { return this->CmdRun(context, request, response); }));}
    void SetMessageAllocatorFor_CmdRun(
        ::grpc::experimental::MessageAllocator< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CmdRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CmdRun(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::CmdRequest* /*request*/, ::l3deditor::Base::CommandRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* CmdRun(::grpc::experimental::CallbackServerContext* /*context*/, const ::l3deditor::Gateway::CmdRequest* /*request*/, ::l3deditor::Base::CommandRet* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CmdRunbat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CmdRunbat() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackBidiHandler< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>(
          [this](::grpc::experimental::CallbackServerContext* context) { return this->CmdRunbat(context); }));
    }
    ~ExperimentalWithCallbackMethod_CmdRunbat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CmdRunbat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::l3deditor::Base::CommandRet, ::l3deditor::Gateway::CmdRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>* CmdRunbat(::grpc::experimental::CallbackServerContext* /*context*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBom() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::l3deditor::Gateway::BomRequest, ::l3deditor::Gateway::BomResponse>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::l3deditor::Gateway::BomRequest* request, ::l3deditor::Gateway::BomResponse* response) { return this->GetBom(context, request, response); }));}
    void SetMessageAllocatorFor_GetBom(
        ::grpc::experimental::MessageAllocator< ::l3deditor::Gateway::BomRequest, ::l3deditor::Gateway::BomResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::l3deditor::Gateway::BomRequest, ::l3deditor::Gateway::BomResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetBom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBom(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::BomRequest* /*request*/, ::l3deditor::Gateway::BomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetBom(::grpc::experimental::CallbackServerContext* /*context*/, const ::l3deditor::Gateway::BomRequest* /*request*/, ::l3deditor::Gateway::BomResponse* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListDocIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListDocIds() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::l3deditor::Gateway::Empty, ::l3deditor::Gateway::DocIdStreamingResponse>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::l3deditor::Gateway::Empty* request) { return this->ListDocIds(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ListDocIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDocIds(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::Empty* /*request*/, ::grpc::ServerWriter< ::l3deditor::Gateway::DocIdStreamingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::l3deditor::Gateway::DocIdStreamingResponse>* ListDocIds(::grpc::experimental::CallbackServerContext* /*context*/, const ::l3deditor::Gateway::Empty* /*request*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetChildren() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::l3deditor::Gateway::BomRequest, ::l3deditor::Gateway::CompStreamingResponse>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::l3deditor::Gateway::BomRequest* request) { return this->GetChildren(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildren(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::BomRequest* /*request*/, ::grpc::ServerWriter< ::l3deditor::Gateway::CompStreamingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::l3deditor::Gateway::CompStreamingResponse>* GetChildren(::grpc::experimental::CallbackServerContext* /*context*/, const ::l3deditor::Gateway::BomRequest* /*request*/) { return nullptr; }
  };
  typedef ExperimentalWithCallbackMethod_CreateAppIns<ExperimentalWithCallbackMethod_CmdRun<ExperimentalWithCallbackMethod_CmdRunbat<ExperimentalWithCallbackMethod_GetBom<ExperimentalWithCallbackMethod_ListDocIds<ExperimentalWithCallbackMethod_GetChildren<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateAppIns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAppIns() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateAppIns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAppIns(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::ClinetInfo* /*request*/, ::l3deditor::Gateway::ClinetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CmdRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CmdRun() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CmdRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CmdRun(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::CmdRequest* /*request*/, ::l3deditor::Base::CommandRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CmdRunbat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CmdRunbat() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CmdRunbat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CmdRunbat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::l3deditor::Base::CommandRet, ::l3deditor::Gateway::CmdRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBom() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetBom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBom(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::BomRequest* /*request*/, ::l3deditor::Gateway::BomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDocIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDocIds() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListDocIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDocIds(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::Empty* /*request*/, ::grpc::ServerWriter< ::l3deditor::Gateway::DocIdStreamingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetChildren() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildren(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::BomRequest* /*request*/, ::grpc::ServerWriter< ::l3deditor::Gateway::CompStreamingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAppIns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAppIns() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateAppIns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAppIns(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::ClinetInfo* /*request*/, ::l3deditor::Gateway::ClinetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAppIns(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CmdRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CmdRun() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CmdRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CmdRun(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::CmdRequest* /*request*/, ::l3deditor::Base::CommandRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCmdRun(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CmdRunbat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CmdRunbat() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CmdRunbat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CmdRunbat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::l3deditor::Base::CommandRet, ::l3deditor::Gateway::CmdRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCmdRunbat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBom() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetBom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBom(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::BomRequest* /*request*/, ::l3deditor::Gateway::BomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDocIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDocIds() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ListDocIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDocIds(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::Empty* /*request*/, ::grpc::ServerWriter< ::l3deditor::Gateway::DocIdStreamingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDocIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetChildren() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildren(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::BomRequest* /*request*/, ::grpc::ServerWriter< ::l3deditor::Gateway::CompStreamingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChildren(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateAppIns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateAppIns() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAppIns(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateAppIns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAppIns(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::ClinetInfo* /*request*/, ::l3deditor::Gateway::ClinetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* CreateAppIns(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CmdRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CmdRun() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CmdRun(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CmdRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CmdRun(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::CmdRequest* /*request*/, ::l3deditor::Base::CommandRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* CmdRun(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CmdRunbat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CmdRunbat() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context) { return this->CmdRunbat(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_CmdRunbat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CmdRunbat(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::l3deditor::Base::CommandRet, ::l3deditor::Gateway::CmdRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* CmdRunbat(::grpc::experimental::CallbackServerContext* /*context*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBom() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBom(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBom(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::BomRequest* /*request*/, ::l3deditor::Gateway::BomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetBom(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListDocIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListDocIds() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ListDocIds(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListDocIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDocIds(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::Empty* /*request*/, ::grpc::ServerWriter< ::l3deditor::Gateway::DocIdStreamingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ListDocIds(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetChildren() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetChildren(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildren(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::BomRequest* /*request*/, ::grpc::ServerWriter< ::l3deditor::Gateway::CompStreamingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetChildren(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/) { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAppIns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAppIns() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::l3deditor::Gateway::ClinetInfo, ::l3deditor::Gateway::ClinetInfo>(std::bind(&WithStreamedUnaryMethod_CreateAppIns<BaseClass>::StreamedCreateAppIns, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateAppIns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAppIns(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::ClinetInfo* /*request*/, ::l3deditor::Gateway::ClinetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAppIns(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::l3deditor::Gateway::ClinetInfo,::l3deditor::Gateway::ClinetInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CmdRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CmdRun() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::l3deditor::Gateway::CmdRequest, ::l3deditor::Base::CommandRet>(std::bind(&WithStreamedUnaryMethod_CmdRun<BaseClass>::StreamedCmdRun, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CmdRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CmdRun(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::CmdRequest* /*request*/, ::l3deditor::Base::CommandRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCmdRun(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::l3deditor::Gateway::CmdRequest,::l3deditor::Base::CommandRet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBom() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::l3deditor::Gateway::BomRequest, ::l3deditor::Gateway::BomResponse>(std::bind(&WithStreamedUnaryMethod_GetBom<BaseClass>::StreamedGetBom, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBom(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::BomRequest* /*request*/, ::l3deditor::Gateway::BomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::l3deditor::Gateway::BomRequest,::l3deditor::Gateway::BomResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateAppIns<WithStreamedUnaryMethod_CmdRun<WithStreamedUnaryMethod_GetBom<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListDocIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ListDocIds() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler< ::l3deditor::Gateway::Empty, ::l3deditor::Gateway::DocIdStreamingResponse>(std::bind(&WithSplitStreamingMethod_ListDocIds<BaseClass>::StreamedListDocIds, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ListDocIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDocIds(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::Empty* /*request*/, ::grpc::ServerWriter< ::l3deditor::Gateway::DocIdStreamingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListDocIds(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::l3deditor::Gateway::Empty,::l3deditor::Gateway::DocIdStreamingResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetChildren() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler< ::l3deditor::Gateway::BomRequest, ::l3deditor::Gateway::CompStreamingResponse>(std::bind(&WithSplitStreamingMethod_GetChildren<BaseClass>::StreamedGetChildren, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChildren(::grpc::ServerContext* /*context*/, const ::l3deditor::Gateway::BomRequest* /*request*/, ::grpc::ServerWriter< ::l3deditor::Gateway::CompStreamingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetChildren(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::l3deditor::Gateway::BomRequest,::l3deditor::Gateway::CompStreamingResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListDocIds<WithSplitStreamingMethod_GetChildren<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateAppIns<WithStreamedUnaryMethod_CmdRun<WithStreamedUnaryMethod_GetBom<WithSplitStreamingMethod_ListDocIds<WithSplitStreamingMethod_GetChildren<Service > > > > > StreamedService;
};

}  // namespace Gateway
}  // namespace l3deditor


#endif  // GRPC_gateway_2eproto__INCLUDED
