// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2eproto;
namespace l3deditor {
namespace Base {
class BaseColor;
class BaseColorDefaultTypeInternal;
extern BaseColorDefaultTypeInternal _BaseColor_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class CommandRet;
class CommandRetDefaultTypeInternal;
extern CommandRetDefaultTypeInternal _CommandRet_default_instance_;
class CommandRet_IdEntry_DoNotUse;
class CommandRet_IdEntry_DoNotUseDefaultTypeInternal;
extern CommandRet_IdEntry_DoNotUseDefaultTypeInternal _CommandRet_IdEntry_DoNotUse_default_instance_;
class Command_IdEntry_DoNotUse;
class Command_IdEntry_DoNotUseDefaultTypeInternal;
extern Command_IdEntry_DoNotUseDefaultTypeInternal _Command_IdEntry_DoNotUse_default_instance_;
class Material;
class MaterialDefaultTypeInternal;
extern MaterialDefaultTypeInternal _Material_default_instance_;
class Matrix44;
class Matrix44DefaultTypeInternal;
extern Matrix44DefaultTypeInternal _Matrix44_default_instance_;
}  // namespace Base
}  // namespace l3deditor
PROTOBUF_NAMESPACE_OPEN
template<> ::l3deditor::Base::BaseColor* Arena::CreateMaybeMessage<::l3deditor::Base::BaseColor>(Arena*);
template<> ::l3deditor::Base::Command* Arena::CreateMaybeMessage<::l3deditor::Base::Command>(Arena*);
template<> ::l3deditor::Base::CommandRet* Arena::CreateMaybeMessage<::l3deditor::Base::CommandRet>(Arena*);
template<> ::l3deditor::Base::CommandRet_IdEntry_DoNotUse* Arena::CreateMaybeMessage<::l3deditor::Base::CommandRet_IdEntry_DoNotUse>(Arena*);
template<> ::l3deditor::Base::Command_IdEntry_DoNotUse* Arena::CreateMaybeMessage<::l3deditor::Base::Command_IdEntry_DoNotUse>(Arena*);
template<> ::l3deditor::Base::Material* Arena::CreateMaybeMessage<::l3deditor::Base::Material>(Arena*);
template<> ::l3deditor::Base::Matrix44* Arena::CreateMaybeMessage<::l3deditor::Base::Matrix44>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace l3deditor {
namespace Base {

enum Command_CmdType : int {
  Command_CmdType_CMDUNKNOW = 0,
  Command_CmdType_CMDLINE = 1,
  Command_CmdType_CMDMACRO = 2,
  Command_CmdType_CMDFILE = 3,
  Command_CmdType_Command_CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Command_CmdType_Command_CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Command_CmdType_IsValid(int value);
constexpr Command_CmdType Command_CmdType_CmdType_MIN = Command_CmdType_CMDUNKNOW;
constexpr Command_CmdType Command_CmdType_CmdType_MAX = Command_CmdType_CMDFILE;
constexpr int Command_CmdType_CmdType_ARRAYSIZE = Command_CmdType_CmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_CmdType_descriptor();
template<typename T>
inline const std::string& Command_CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Command_CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Command_CmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Command_CmdType_descriptor(), enum_t_value);
}
inline bool Command_CmdType_Parse(
    const std::string& name, Command_CmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Command_CmdType>(
    Command_CmdType_descriptor(), name, value);
}
enum DrawStyle : int {
  DSFILLED = 0,
  DSLINES = 1,
  DSSPOINTS = 2,
  DSINVISIBLE = 3,
  DrawStyle_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DrawStyle_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DrawStyle_IsValid(int value);
constexpr DrawStyle DrawStyle_MIN = DSFILLED;
constexpr DrawStyle DrawStyle_MAX = DSINVISIBLE;
constexpr int DrawStyle_ARRAYSIZE = DrawStyle_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DrawStyle_descriptor();
template<typename T>
inline const std::string& DrawStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DrawStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DrawStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DrawStyle_descriptor(), enum_t_value);
}
inline bool DrawStyle_Parse(
    const std::string& name, DrawStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DrawStyle>(
    DrawStyle_descriptor(), name, value);
}
// ===================================================================

class BaseColor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Base.BaseColor) */ {
 public:
  BaseColor();
  virtual ~BaseColor();

  BaseColor(const BaseColor& from);
  BaseColor(BaseColor&& from) noexcept
    : BaseColor() {
    *this = ::std::move(from);
  }

  inline BaseColor& operator=(const BaseColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseColor& operator=(BaseColor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseColor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseColor* internal_default_instance() {
    return reinterpret_cast<const BaseColor*>(
               &_BaseColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseColor& a, BaseColor& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseColor* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseColor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseColor* New() const final {
    return CreateMaybeMessage<BaseColor>(nullptr);
  }

  BaseColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseColor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseColor& from);
  void MergeFrom(const BaseColor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseColor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Base.BaseColor";
  }
  protected:
  explicit BaseColor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // float R = 1;
  void clear_r();
  float r() const;
  void set_r(float value);
  private:
  float _internal_r() const;
  void _internal_set_r(float value);
  public:

  // float G = 2;
  void clear_g();
  float g() const;
  void set_g(float value);
  private:
  float _internal_g() const;
  void _internal_set_g(float value);
  public:

  // float B = 3;
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // float A = 4;
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // @@protoc_insertion_point(class_scope:l3deditor.Base.BaseColor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float r_;
  float g_;
  float b_;
  float a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class Matrix44 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Base.Matrix44) */ {
 public:
  Matrix44();
  virtual ~Matrix44();

  Matrix44(const Matrix44& from);
  Matrix44(Matrix44&& from) noexcept
    : Matrix44() {
    *this = ::std::move(from);
  }

  inline Matrix44& operator=(const Matrix44& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix44& operator=(Matrix44&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Matrix44& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Matrix44* internal_default_instance() {
    return reinterpret_cast<const Matrix44*>(
               &_Matrix44_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Matrix44& a, Matrix44& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix44* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix44* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Matrix44* New() const final {
    return CreateMaybeMessage<Matrix44>(nullptr);
  }

  Matrix44* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Matrix44>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Matrix44& from);
  void MergeFrom(const Matrix44& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix44* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Base.Matrix44";
  }
  protected:
  explicit Matrix44(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kM00FieldNumber = 1,
    kM01FieldNumber = 2,
    kM02FieldNumber = 3,
    kM03FieldNumber = 4,
    kM10FieldNumber = 5,
    kM11FieldNumber = 6,
    kM12FieldNumber = 7,
    kM13FieldNumber = 8,
    kM20FieldNumber = 9,
    kM21FieldNumber = 10,
    kM22FieldNumber = 11,
    kM23FieldNumber = 12,
    kM30FieldNumber = 13,
    kM31FieldNumber = 14,
    kM32FieldNumber = 15,
    kM33FieldNumber = 16,
  };
  // float m00 = 1;
  void clear_m00();
  float m00() const;
  void set_m00(float value);
  private:
  float _internal_m00() const;
  void _internal_set_m00(float value);
  public:

  // float m01 = 2;
  void clear_m01();
  float m01() const;
  void set_m01(float value);
  private:
  float _internal_m01() const;
  void _internal_set_m01(float value);
  public:

  // float m02 = 3;
  void clear_m02();
  float m02() const;
  void set_m02(float value);
  private:
  float _internal_m02() const;
  void _internal_set_m02(float value);
  public:

  // float m03 = 4;
  void clear_m03();
  float m03() const;
  void set_m03(float value);
  private:
  float _internal_m03() const;
  void _internal_set_m03(float value);
  public:

  // float m10 = 5;
  void clear_m10();
  float m10() const;
  void set_m10(float value);
  private:
  float _internal_m10() const;
  void _internal_set_m10(float value);
  public:

  // float m11 = 6;
  void clear_m11();
  float m11() const;
  void set_m11(float value);
  private:
  float _internal_m11() const;
  void _internal_set_m11(float value);
  public:

  // float m12 = 7;
  void clear_m12();
  float m12() const;
  void set_m12(float value);
  private:
  float _internal_m12() const;
  void _internal_set_m12(float value);
  public:

  // float m13 = 8;
  void clear_m13();
  float m13() const;
  void set_m13(float value);
  private:
  float _internal_m13() const;
  void _internal_set_m13(float value);
  public:

  // float m20 = 9;
  void clear_m20();
  float m20() const;
  void set_m20(float value);
  private:
  float _internal_m20() const;
  void _internal_set_m20(float value);
  public:

  // float m21 = 10;
  void clear_m21();
  float m21() const;
  void set_m21(float value);
  private:
  float _internal_m21() const;
  void _internal_set_m21(float value);
  public:

  // float m22 = 11;
  void clear_m22();
  float m22() const;
  void set_m22(float value);
  private:
  float _internal_m22() const;
  void _internal_set_m22(float value);
  public:

  // float m23 = 12;
  void clear_m23();
  float m23() const;
  void set_m23(float value);
  private:
  float _internal_m23() const;
  void _internal_set_m23(float value);
  public:

  // float m30 = 13;
  void clear_m30();
  float m30() const;
  void set_m30(float value);
  private:
  float _internal_m30() const;
  void _internal_set_m30(float value);
  public:

  // float m31 = 14;
  void clear_m31();
  float m31() const;
  void set_m31(float value);
  private:
  float _internal_m31() const;
  void _internal_set_m31(float value);
  public:

  // float m32 = 15;
  void clear_m32();
  float m32() const;
  void set_m32(float value);
  private:
  float _internal_m32() const;
  void _internal_set_m32(float value);
  public:

  // float m33 = 16;
  void clear_m33();
  float m33() const;
  void set_m33(float value);
  private:
  float _internal_m33() const;
  void _internal_set_m33(float value);
  public:

  // @@protoc_insertion_point(class_scope:l3deditor.Base.Matrix44)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float m00_;
  float m01_;
  float m02_;
  float m03_;
  float m10_;
  float m11_;
  float m12_;
  float m13_;
  float m20_;
  float m21_;
  float m22_;
  float m23_;
  float m30_;
  float m31_;
  float m32_;
  float m33_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class Material :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Base.Material) */ {
 public:
  Material();
  virtual ~Material();

  Material(const Material& from);
  Material(Material&& from) noexcept
    : Material() {
    *this = ::std::move(from);
  }

  inline Material& operator=(const Material& from) {
    CopyFrom(from);
    return *this;
  }
  inline Material& operator=(Material&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Material& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Material* internal_default_instance() {
    return reinterpret_cast<const Material*>(
               &_Material_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Material& a, Material& b) {
    a.Swap(&b);
  }
  inline void Swap(Material* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Material* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Material* New() const final {
    return CreateMaybeMessage<Material>(nullptr);
  }

  Material* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Material>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Material& from);
  void MergeFrom(const Material& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Material* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Base.Material";
  }
  protected:
  explicit Material(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:l3deditor.Base.Material)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class Command_IdEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Command_IdEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Command_IdEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Command_IdEntry_DoNotUse();
  Command_IdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Command_IdEntry_DoNotUse& other);
  static const Command_IdEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Command_IdEntry_DoNotUse*>(&_Command_IdEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "l3deditor.Base.Command.IdEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "l3deditor.Base.Command.IdEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class Command :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Base.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Base.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef Command_CmdType CmdType;
  static constexpr CmdType CMDUNKNOW =
    Command_CmdType_CMDUNKNOW;
  static constexpr CmdType CMDLINE =
    Command_CmdType_CMDLINE;
  static constexpr CmdType CMDMACRO =
    Command_CmdType_CMDMACRO;
  static constexpr CmdType CMDFILE =
    Command_CmdType_CMDFILE;
  static inline bool CmdType_IsValid(int value) {
    return Command_CmdType_IsValid(value);
  }
  static constexpr CmdType CmdType_MIN =
    Command_CmdType_CmdType_MIN;
  static constexpr CmdType CmdType_MAX =
    Command_CmdType_CmdType_MAX;
  static constexpr int CmdType_ARRAYSIZE =
    Command_CmdType_CmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CmdType_descriptor() {
    return Command_CmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& CmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CmdType_Name.");
    return Command_CmdType_Name(enum_t_value);
  }
  static inline bool CmdType_Parse(const std::string& name,
      CmdType* value) {
    return Command_CmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDataFieldNumber = 4,
    kSourceFieldNumber = 2,
    kSessionFieldNumber = 3,
    kOccTimeFieldNumber = 5,
  };
  // map<string, string> _id = 1;
  int _id_size() const;
  private:
  int _internal__id_size() const;
  public:
  void clear__id();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal__id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable__id();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable__id();

  // string data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 source = 2;
  void clear_source();
  ::PROTOBUF_NAMESPACE_ID::uint32 source() const;
  void set_source(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_source() const;
  void _internal_set_source(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 session = 3;
  void clear_session();
  ::PROTOBUF_NAMESPACE_ID::int32 session() const;
  void set_session(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session() const;
  void _internal_set_session(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 occTime = 5;
  void clear_occtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 occtime() const;
  void set_occtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_occtime() const;
  void _internal_set_occtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:l3deditor.Base.Command)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Command_IdEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > _id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 source_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_;
  ::PROTOBUF_NAMESPACE_ID::uint64 occtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class CommandRet_IdEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommandRet_IdEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommandRet_IdEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CommandRet_IdEntry_DoNotUse();
  CommandRet_IdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CommandRet_IdEntry_DoNotUse& other);
  static const CommandRet_IdEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CommandRet_IdEntry_DoNotUse*>(&_CommandRet_IdEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "l3deditor.Base.CommandRet.IdEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "l3deditor.Base.CommandRet.IdEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class CommandRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Base.CommandRet) */ {
 public:
  CommandRet();
  virtual ~CommandRet();

  CommandRet(const CommandRet& from);
  CommandRet(CommandRet&& from) noexcept
    : CommandRet() {
    *this = ::std::move(from);
  }

  inline CommandRet& operator=(const CommandRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRet& operator=(CommandRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandRet* internal_default_instance() {
    return reinterpret_cast<const CommandRet*>(
               &_CommandRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommandRet& a, CommandRet& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRet* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandRet* New() const final {
    return CreateMaybeMessage<CommandRet>(nullptr);
  }

  CommandRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandRet& from);
  void MergeFrom(const CommandRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Base.CommandRet";
  }
  protected:
  explicit CommandRet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCmdIdFieldNumber = 2,
    kDataFieldNumber = 4,
    kOccTimeFieldNumber = 5,
    kRetCodeFieldNumber = 3,
  };
  // map<string, string> _id = 1;
  int _id_size() const;
  private:
  int _internal__id_size() const;
  public:
  void clear__id();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal__id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable__id();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable__id();

  // string cmdId = 2;
  void clear_cmdid();
  const std::string& cmdid() const;
  void set_cmdid(const std::string& value);
  void set_cmdid(std::string&& value);
  void set_cmdid(const char* value);
  void set_cmdid(const char* value, size_t size);
  std::string* mutable_cmdid();
  std::string* release_cmdid();
  void set_allocated_cmdid(std::string* cmdid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cmdid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cmdid(
      std::string* cmdid);
  private:
  const std::string& _internal_cmdid() const;
  void _internal_set_cmdid(const std::string& value);
  std::string* _internal_mutable_cmdid();
  public:

  // string data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 occTime = 5;
  void clear_occtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 occtime() const;
  void set_occtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_occtime() const;
  void _internal_set_occtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 retCode = 3;
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::int32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:l3deditor.Base.CommandRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CommandRet_IdEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > _id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmdid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 occtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 retcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseColor

// float R = 1;
inline void BaseColor::clear_r() {
  r_ = 0;
}
inline float BaseColor::_internal_r() const {
  return r_;
}
inline float BaseColor::r() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.BaseColor.R)
  return _internal_r();
}
inline void BaseColor::_internal_set_r(float value) {
  
  r_ = value;
}
inline void BaseColor::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.BaseColor.R)
}

// float G = 2;
inline void BaseColor::clear_g() {
  g_ = 0;
}
inline float BaseColor::_internal_g() const {
  return g_;
}
inline float BaseColor::g() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.BaseColor.G)
  return _internal_g();
}
inline void BaseColor::_internal_set_g(float value) {
  
  g_ = value;
}
inline void BaseColor::set_g(float value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.BaseColor.G)
}

// float B = 3;
inline void BaseColor::clear_b() {
  b_ = 0;
}
inline float BaseColor::_internal_b() const {
  return b_;
}
inline float BaseColor::b() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.BaseColor.B)
  return _internal_b();
}
inline void BaseColor::_internal_set_b(float value) {
  
  b_ = value;
}
inline void BaseColor::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.BaseColor.B)
}

// float A = 4;
inline void BaseColor::clear_a() {
  a_ = 0;
}
inline float BaseColor::_internal_a() const {
  return a_;
}
inline float BaseColor::a() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.BaseColor.A)
  return _internal_a();
}
inline void BaseColor::_internal_set_a(float value) {
  
  a_ = value;
}
inline void BaseColor::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.BaseColor.A)
}

// -------------------------------------------------------------------

// Matrix44

// float m00 = 1;
inline void Matrix44::clear_m00() {
  m00_ = 0;
}
inline float Matrix44::_internal_m00() const {
  return m00_;
}
inline float Matrix44::m00() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m00)
  return _internal_m00();
}
inline void Matrix44::_internal_set_m00(float value) {
  
  m00_ = value;
}
inline void Matrix44::set_m00(float value) {
  _internal_set_m00(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m00)
}

// float m01 = 2;
inline void Matrix44::clear_m01() {
  m01_ = 0;
}
inline float Matrix44::_internal_m01() const {
  return m01_;
}
inline float Matrix44::m01() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m01)
  return _internal_m01();
}
inline void Matrix44::_internal_set_m01(float value) {
  
  m01_ = value;
}
inline void Matrix44::set_m01(float value) {
  _internal_set_m01(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m01)
}

// float m02 = 3;
inline void Matrix44::clear_m02() {
  m02_ = 0;
}
inline float Matrix44::_internal_m02() const {
  return m02_;
}
inline float Matrix44::m02() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m02)
  return _internal_m02();
}
inline void Matrix44::_internal_set_m02(float value) {
  
  m02_ = value;
}
inline void Matrix44::set_m02(float value) {
  _internal_set_m02(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m02)
}

// float m03 = 4;
inline void Matrix44::clear_m03() {
  m03_ = 0;
}
inline float Matrix44::_internal_m03() const {
  return m03_;
}
inline float Matrix44::m03() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m03)
  return _internal_m03();
}
inline void Matrix44::_internal_set_m03(float value) {
  
  m03_ = value;
}
inline void Matrix44::set_m03(float value) {
  _internal_set_m03(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m03)
}

// float m10 = 5;
inline void Matrix44::clear_m10() {
  m10_ = 0;
}
inline float Matrix44::_internal_m10() const {
  return m10_;
}
inline float Matrix44::m10() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m10)
  return _internal_m10();
}
inline void Matrix44::_internal_set_m10(float value) {
  
  m10_ = value;
}
inline void Matrix44::set_m10(float value) {
  _internal_set_m10(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m10)
}

// float m11 = 6;
inline void Matrix44::clear_m11() {
  m11_ = 0;
}
inline float Matrix44::_internal_m11() const {
  return m11_;
}
inline float Matrix44::m11() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m11)
  return _internal_m11();
}
inline void Matrix44::_internal_set_m11(float value) {
  
  m11_ = value;
}
inline void Matrix44::set_m11(float value) {
  _internal_set_m11(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m11)
}

// float m12 = 7;
inline void Matrix44::clear_m12() {
  m12_ = 0;
}
inline float Matrix44::_internal_m12() const {
  return m12_;
}
inline float Matrix44::m12() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m12)
  return _internal_m12();
}
inline void Matrix44::_internal_set_m12(float value) {
  
  m12_ = value;
}
inline void Matrix44::set_m12(float value) {
  _internal_set_m12(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m12)
}

// float m13 = 8;
inline void Matrix44::clear_m13() {
  m13_ = 0;
}
inline float Matrix44::_internal_m13() const {
  return m13_;
}
inline float Matrix44::m13() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m13)
  return _internal_m13();
}
inline void Matrix44::_internal_set_m13(float value) {
  
  m13_ = value;
}
inline void Matrix44::set_m13(float value) {
  _internal_set_m13(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m13)
}

// float m20 = 9;
inline void Matrix44::clear_m20() {
  m20_ = 0;
}
inline float Matrix44::_internal_m20() const {
  return m20_;
}
inline float Matrix44::m20() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m20)
  return _internal_m20();
}
inline void Matrix44::_internal_set_m20(float value) {
  
  m20_ = value;
}
inline void Matrix44::set_m20(float value) {
  _internal_set_m20(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m20)
}

// float m21 = 10;
inline void Matrix44::clear_m21() {
  m21_ = 0;
}
inline float Matrix44::_internal_m21() const {
  return m21_;
}
inline float Matrix44::m21() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m21)
  return _internal_m21();
}
inline void Matrix44::_internal_set_m21(float value) {
  
  m21_ = value;
}
inline void Matrix44::set_m21(float value) {
  _internal_set_m21(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m21)
}

// float m22 = 11;
inline void Matrix44::clear_m22() {
  m22_ = 0;
}
inline float Matrix44::_internal_m22() const {
  return m22_;
}
inline float Matrix44::m22() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m22)
  return _internal_m22();
}
inline void Matrix44::_internal_set_m22(float value) {
  
  m22_ = value;
}
inline void Matrix44::set_m22(float value) {
  _internal_set_m22(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m22)
}

// float m23 = 12;
inline void Matrix44::clear_m23() {
  m23_ = 0;
}
inline float Matrix44::_internal_m23() const {
  return m23_;
}
inline float Matrix44::m23() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m23)
  return _internal_m23();
}
inline void Matrix44::_internal_set_m23(float value) {
  
  m23_ = value;
}
inline void Matrix44::set_m23(float value) {
  _internal_set_m23(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m23)
}

// float m30 = 13;
inline void Matrix44::clear_m30() {
  m30_ = 0;
}
inline float Matrix44::_internal_m30() const {
  return m30_;
}
inline float Matrix44::m30() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m30)
  return _internal_m30();
}
inline void Matrix44::_internal_set_m30(float value) {
  
  m30_ = value;
}
inline void Matrix44::set_m30(float value) {
  _internal_set_m30(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m30)
}

// float m31 = 14;
inline void Matrix44::clear_m31() {
  m31_ = 0;
}
inline float Matrix44::_internal_m31() const {
  return m31_;
}
inline float Matrix44::m31() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m31)
  return _internal_m31();
}
inline void Matrix44::_internal_set_m31(float value) {
  
  m31_ = value;
}
inline void Matrix44::set_m31(float value) {
  _internal_set_m31(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m31)
}

// float m32 = 15;
inline void Matrix44::clear_m32() {
  m32_ = 0;
}
inline float Matrix44::_internal_m32() const {
  return m32_;
}
inline float Matrix44::m32() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m32)
  return _internal_m32();
}
inline void Matrix44::_internal_set_m32(float value) {
  
  m32_ = value;
}
inline void Matrix44::set_m32(float value) {
  _internal_set_m32(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m32)
}

// float m33 = 16;
inline void Matrix44::clear_m33() {
  m33_ = 0;
}
inline float Matrix44::_internal_m33() const {
  return m33_;
}
inline float Matrix44::m33() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Matrix44.m33)
  return _internal_m33();
}
inline void Matrix44::_internal_set_m33(float value) {
  
  m33_ = value;
}
inline void Matrix44::set_m33(float value) {
  _internal_set_m33(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Matrix44.m33)
}

// -------------------------------------------------------------------

// Material

// string name = 1;
inline void Material::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Material::name() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Material.name)
  return _internal_name();
}
inline void Material::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Material.name)
}
inline std::string* Material::mutable_name() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Base.Material.name)
  return _internal_mutable_name();
}
inline const std::string& Material::_internal_name() const {
  return name_.Get();
}
inline void Material::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void Material::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Base.Material.name)
}
inline void Material::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Base.Material.name)
}
inline void Material::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Base.Material.name)
}
inline std::string* Material::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Material::release_name() {
  // @@protoc_insertion_point(field_release:l3deditor.Base.Material.name)
  
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Material::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Base.Material.name)
}
inline std::string* Material::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Base.Material.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Material::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Base.Material.name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Command

// map<string, string> _id = 1;
inline int Command::_internal__id_size() const {
  return _id_.size();
}
inline int Command::_id_size() const {
  return _internal__id_size();
}
inline void Command::clear__id() {
  _id_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Command::_internal__id() const {
  return _id_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Command::_id() const {
  // @@protoc_insertion_point(field_map:l3deditor.Base.Command._id)
  return _internal__id();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Command::_internal_mutable__id() {
  return _id_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Command::mutable__id() {
  // @@protoc_insertion_point(field_mutable_map:l3deditor.Base.Command._id)
  return _internal_mutable__id();
}

// uint32 source = 2;
inline void Command::clear_source() {
  source_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::_internal_source() const {
  return source_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::source() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Command.source)
  return _internal_source();
}
inline void Command::_internal_set_source(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  source_ = value;
}
inline void Command::set_source(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Command.source)
}

// int32 session = 3;
inline void Command::clear_session() {
  session_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Command::_internal_session() const {
  return session_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Command::session() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Command.session)
  return _internal_session();
}
inline void Command::_internal_set_session(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_ = value;
}
inline void Command::set_session(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Command.session)
}

// string data = 4;
inline void Command::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Command::data() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Command.data)
  return _internal_data();
}
inline void Command::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Command.data)
}
inline std::string* Command::mutable_data() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Base.Command.data)
  return _internal_mutable_data();
}
inline const std::string& Command::_internal_data() const {
  return data_.Get();
}
inline void Command::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void Command::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Base.Command.data)
}
inline void Command::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Base.Command.data)
}
inline void Command::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Base.Command.data)
}
inline std::string* Command::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Command::release_data() {
  // @@protoc_insertion_point(field_release:l3deditor.Base.Command.data)
  
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Command::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Base.Command.data)
}
inline std::string* Command::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Base.Command.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Command::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Base.Command.data)
}

// uint64 occTime = 5;
inline void Command::clear_occtime() {
  occtime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Command::_internal_occtime() const {
  return occtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Command::occtime() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.Command.occTime)
  return _internal_occtime();
}
inline void Command::_internal_set_occtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  occtime_ = value;
}
inline void Command::set_occtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_occtime(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.Command.occTime)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CommandRet

// map<string, string> _id = 1;
inline int CommandRet::_internal__id_size() const {
  return _id_.size();
}
inline int CommandRet::_id_size() const {
  return _internal__id_size();
}
inline void CommandRet::clear__id() {
  _id_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommandRet::_internal__id() const {
  return _id_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommandRet::_id() const {
  // @@protoc_insertion_point(field_map:l3deditor.Base.CommandRet._id)
  return _internal__id();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommandRet::_internal_mutable__id() {
  return _id_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommandRet::mutable__id() {
  // @@protoc_insertion_point(field_mutable_map:l3deditor.Base.CommandRet._id)
  return _internal_mutable__id();
}

// string cmdId = 2;
inline void CommandRet::clear_cmdid() {
  cmdid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& CommandRet::cmdid() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.CommandRet.cmdId)
  return _internal_cmdid();
}
inline void CommandRet::set_cmdid(const std::string& value) {
  _internal_set_cmdid(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.CommandRet.cmdId)
}
inline std::string* CommandRet::mutable_cmdid() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Base.CommandRet.cmdId)
  return _internal_mutable_cmdid();
}
inline const std::string& CommandRet::_internal_cmdid() const {
  return cmdid_.Get();
}
inline void CommandRet::_internal_set_cmdid(const std::string& value) {
  
  cmdid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void CommandRet::set_cmdid(std::string&& value) {
  
  cmdid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Base.CommandRet.cmdId)
}
inline void CommandRet::set_cmdid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmdid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Base.CommandRet.cmdId)
}
inline void CommandRet::set_cmdid(const char* value,
    size_t size) {
  
  cmdid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Base.CommandRet.cmdId)
}
inline std::string* CommandRet::_internal_mutable_cmdid() {
  
  return cmdid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* CommandRet::release_cmdid() {
  // @@protoc_insertion_point(field_release:l3deditor.Base.CommandRet.cmdId)
  
  return cmdid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CommandRet::set_allocated_cmdid(std::string* cmdid) {
  if (cmdid != nullptr) {
    
  } else {
    
  }
  cmdid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmdid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Base.CommandRet.cmdId)
}
inline std::string* CommandRet::unsafe_arena_release_cmdid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Base.CommandRet.cmdId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return cmdid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CommandRet::unsafe_arena_set_allocated_cmdid(
    std::string* cmdid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (cmdid != nullptr) {
    
  } else {
    
  }
  cmdid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cmdid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Base.CommandRet.cmdId)
}

// int32 retCode = 3;
inline void CommandRet::clear_retcode() {
  retcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandRet::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandRet::retcode() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.CommandRet.retCode)
  return _internal_retcode();
}
inline void CommandRet::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  retcode_ = value;
}
inline void CommandRet::set_retcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.CommandRet.retCode)
}

// string data = 4;
inline void CommandRet::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& CommandRet::data() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.CommandRet.data)
  return _internal_data();
}
inline void CommandRet::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.CommandRet.data)
}
inline std::string* CommandRet::mutable_data() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Base.CommandRet.data)
  return _internal_mutable_data();
}
inline const std::string& CommandRet::_internal_data() const {
  return data_.Get();
}
inline void CommandRet::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void CommandRet::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Base.CommandRet.data)
}
inline void CommandRet::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Base.CommandRet.data)
}
inline void CommandRet::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Base.CommandRet.data)
}
inline std::string* CommandRet::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* CommandRet::release_data() {
  // @@protoc_insertion_point(field_release:l3deditor.Base.CommandRet.data)
  
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CommandRet::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Base.CommandRet.data)
}
inline std::string* CommandRet::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Base.CommandRet.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CommandRet::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Base.CommandRet.data)
}

// uint64 occTime = 5;
inline void CommandRet::clear_occtime() {
  occtime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandRet::_internal_occtime() const {
  return occtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandRet::occtime() const {
  // @@protoc_insertion_point(field_get:l3deditor.Base.CommandRet.occTime)
  return _internal_occtime();
}
inline void CommandRet::_internal_set_occtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  occtime_ = value;
}
inline void CommandRet::set_occtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_occtime(value);
  // @@protoc_insertion_point(field_set:l3deditor.Base.CommandRet.occTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Base
}  // namespace l3deditor

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::l3deditor::Base::Command_CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::l3deditor::Base::Command_CmdType>() {
  return ::l3deditor::Base::Command_CmdType_descriptor();
}
template <> struct is_proto_enum< ::l3deditor::Base::DrawStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::l3deditor::Base::DrawStyle>() {
  return ::l3deditor::Base::DrawStyle_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_2eproto
