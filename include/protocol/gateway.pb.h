// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gateway_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gateway_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
#include "bom.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gateway_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gateway_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gateway_2eproto;
namespace l3deditor {
namespace Gateway {
class BomRequest;
class BomRequestDefaultTypeInternal;
extern BomRequestDefaultTypeInternal _BomRequest_default_instance_;
class BomResponse;
class BomResponseDefaultTypeInternal;
extern BomResponseDefaultTypeInternal _BomResponse_default_instance_;
class ClinetInfo;
class ClinetInfoDefaultTypeInternal;
extern ClinetInfoDefaultTypeInternal _ClinetInfo_default_instance_;
class CmdRequest;
class CmdRequestDefaultTypeInternal;
extern CmdRequestDefaultTypeInternal _CmdRequest_default_instance_;
class CompStreamingResponse;
class CompStreamingResponseDefaultTypeInternal;
extern CompStreamingResponseDefaultTypeInternal _CompStreamingResponse_default_instance_;
class DocIdStreamingResponse;
class DocIdStreamingResponseDefaultTypeInternal;
extern DocIdStreamingResponseDefaultTypeInternal _DocIdStreamingResponse_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Token;
class TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace Gateway
}  // namespace l3deditor
PROTOBUF_NAMESPACE_OPEN
template<> ::l3deditor::Gateway::BomRequest* Arena::CreateMaybeMessage<::l3deditor::Gateway::BomRequest>(Arena*);
template<> ::l3deditor::Gateway::BomResponse* Arena::CreateMaybeMessage<::l3deditor::Gateway::BomResponse>(Arena*);
template<> ::l3deditor::Gateway::ClinetInfo* Arena::CreateMaybeMessage<::l3deditor::Gateway::ClinetInfo>(Arena*);
template<> ::l3deditor::Gateway::CmdRequest* Arena::CreateMaybeMessage<::l3deditor::Gateway::CmdRequest>(Arena*);
template<> ::l3deditor::Gateway::CompStreamingResponse* Arena::CreateMaybeMessage<::l3deditor::Gateway::CompStreamingResponse>(Arena*);
template<> ::l3deditor::Gateway::DocIdStreamingResponse* Arena::CreateMaybeMessage<::l3deditor::Gateway::DocIdStreamingResponse>(Arena*);
template<> ::l3deditor::Gateway::Empty* Arena::CreateMaybeMessage<::l3deditor::Gateway::Empty>(Arena*);
template<> ::l3deditor::Gateway::Token* Arena::CreateMaybeMessage<::l3deditor::Gateway::Token>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace l3deditor {
namespace Gateway {

// ===================================================================

class Empty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Gateway.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Gateway.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gateway_2eproto);
    return ::descriptor_table_gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 1,
  };
  // .l3deditor.Gateway.ClinetInfo client = 1;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::l3deditor::Gateway::ClinetInfo& client() const;
  ::l3deditor::Gateway::ClinetInfo* release_client();
  ::l3deditor::Gateway::ClinetInfo* mutable_client();
  void set_allocated_client(::l3deditor::Gateway::ClinetInfo* client);
  private:
  const ::l3deditor::Gateway::ClinetInfo& _internal_client() const;
  ::l3deditor::Gateway::ClinetInfo* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::l3deditor::Gateway::ClinetInfo* client);
  ::l3deditor::Gateway::ClinetInfo* unsafe_arena_release_client();

  // @@protoc_insertion_point(class_scope:l3deditor.Gateway.Empty)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::l3deditor::Gateway::ClinetInfo* client_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class BomRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Gateway.BomRequest) */ {
 public:
  BomRequest();
  virtual ~BomRequest();

  BomRequest(const BomRequest& from);
  BomRequest(BomRequest&& from) noexcept
    : BomRequest() {
    *this = ::std::move(from);
  }

  inline BomRequest& operator=(const BomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BomRequest& operator=(BomRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BomRequest& default_instance();

  enum BomOneofCase {
    kDocumentId = 2,
    kComponentId = 3,
    BOM_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BomRequest* internal_default_instance() {
    return reinterpret_cast<const BomRequest*>(
               &_BomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BomRequest& a, BomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BomRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BomRequest* New() const final {
    return CreateMaybeMessage<BomRequest>(nullptr);
  }

  BomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BomRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BomRequest& from);
  void MergeFrom(const BomRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BomRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Gateway.BomRequest";
  }
  protected:
  explicit BomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gateway_2eproto);
    return ::descriptor_table_gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 1,
    kDocumentIdFieldNumber = 2,
    kComponentIdFieldNumber = 3,
  };
  // .l3deditor.Gateway.ClinetInfo client = 1;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::l3deditor::Gateway::ClinetInfo& client() const;
  ::l3deditor::Gateway::ClinetInfo* release_client();
  ::l3deditor::Gateway::ClinetInfo* mutable_client();
  void set_allocated_client(::l3deditor::Gateway::ClinetInfo* client);
  private:
  const ::l3deditor::Gateway::ClinetInfo& _internal_client() const;
  ::l3deditor::Gateway::ClinetInfo* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::l3deditor::Gateway::ClinetInfo* client);
  ::l3deditor::Gateway::ClinetInfo* unsafe_arena_release_client();

  // string documentId = 2;
  private:
  bool _internal_has_documentid() const;
  public:
  void clear_documentid();
  const std::string& documentid() const;
  void set_documentid(const std::string& value);
  void set_documentid(std::string&& value);
  void set_documentid(const char* value);
  void set_documentid(const char* value, size_t size);
  std::string* mutable_documentid();
  std::string* release_documentid();
  void set_allocated_documentid(std::string* documentid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_documentid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_documentid(
      std::string* documentid);
  private:
  const std::string& _internal_documentid() const;
  void _internal_set_documentid(const std::string& value);
  std::string* _internal_mutable_documentid();
  public:

  // string componentId = 3;
  private:
  bool _internal_has_componentid() const;
  public:
  void clear_componentid();
  const std::string& componentid() const;
  void set_componentid(const std::string& value);
  void set_componentid(std::string&& value);
  void set_componentid(const char* value);
  void set_componentid(const char* value, size_t size);
  std::string* mutable_componentid();
  std::string* release_componentid();
  void set_allocated_componentid(std::string* componentid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_componentid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_componentid(
      std::string* componentid);
  private:
  const std::string& _internal_componentid() const;
  void _internal_set_componentid(const std::string& value);
  std::string* _internal_mutable_componentid();
  public:

  void clear_bom_oneof();
  BomOneofCase bom_oneof_case() const;
  // @@protoc_insertion_point(class_scope:l3deditor.Gateway.BomRequest)
 private:
  class _Internal;
  void set_has_documentid();
  void set_has_componentid();

  inline bool has_bom_oneof() const;
  inline void clear_has_bom_oneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::l3deditor::Gateway::ClinetInfo* client_;
  union BomOneofUnion {
    BomOneofUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr documentid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr componentid_;
  } bom_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class BomResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Gateway.BomResponse) */ {
 public:
  BomResponse();
  virtual ~BomResponse();

  BomResponse(const BomResponse& from);
  BomResponse(BomResponse&& from) noexcept
    : BomResponse() {
    *this = ::std::move(from);
  }

  inline BomResponse& operator=(const BomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BomResponse& operator=(BomResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BomResponse& default_instance();

  enum BomOneofCase {
    kDocument = 1,
    kComponent = 2,
    BOM_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BomResponse* internal_default_instance() {
    return reinterpret_cast<const BomResponse*>(
               &_BomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BomResponse& a, BomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BomResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BomResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BomResponse* New() const final {
    return CreateMaybeMessage<BomResponse>(nullptr);
  }

  BomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BomResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BomResponse& from);
  void MergeFrom(const BomResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BomResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Gateway.BomResponse";
  }
  protected:
  explicit BomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gateway_2eproto);
    return ::descriptor_table_gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentFieldNumber = 1,
    kComponentFieldNumber = 2,
  };
  // .l3deditor.Bom.Document document = 1;
  bool has_document() const;
  private:
  bool _internal_has_document() const;
  public:
  void clear_document();
  const ::l3deditor::Bom::Document& document() const;
  ::l3deditor::Bom::Document* release_document();
  ::l3deditor::Bom::Document* mutable_document();
  void set_allocated_document(::l3deditor::Bom::Document* document);
  private:
  const ::l3deditor::Bom::Document& _internal_document() const;
  ::l3deditor::Bom::Document* _internal_mutable_document();
  public:
  void unsafe_arena_set_allocated_document(
      ::l3deditor::Bom::Document* document);
  ::l3deditor::Bom::Document* unsafe_arena_release_document();

  // .l3deditor.Bom.Component component = 2;
  bool has_component() const;
  private:
  bool _internal_has_component() const;
  public:
  void clear_component();
  const ::l3deditor::Bom::Component& component() const;
  ::l3deditor::Bom::Component* release_component();
  ::l3deditor::Bom::Component* mutable_component();
  void set_allocated_component(::l3deditor::Bom::Component* component);
  private:
  const ::l3deditor::Bom::Component& _internal_component() const;
  ::l3deditor::Bom::Component* _internal_mutable_component();
  public:
  void unsafe_arena_set_allocated_component(
      ::l3deditor::Bom::Component* component);
  ::l3deditor::Bom::Component* unsafe_arena_release_component();

  void clear_bom_oneof();
  BomOneofCase bom_oneof_case() const;
  // @@protoc_insertion_point(class_scope:l3deditor.Gateway.BomResponse)
 private:
  class _Internal;
  void set_has_document();
  void set_has_component();

  inline bool has_bom_oneof() const;
  inline void clear_has_bom_oneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union BomOneofUnion {
    BomOneofUnion() {}
    ::l3deditor::Bom::Document* document_;
    ::l3deditor::Bom::Component* component_;
  } bom_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class CompStreamingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Gateway.CompStreamingResponse) */ {
 public:
  CompStreamingResponse();
  virtual ~CompStreamingResponse();

  CompStreamingResponse(const CompStreamingResponse& from);
  CompStreamingResponse(CompStreamingResponse&& from) noexcept
    : CompStreamingResponse() {
    *this = ::std::move(from);
  }

  inline CompStreamingResponse& operator=(const CompStreamingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompStreamingResponse& operator=(CompStreamingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompStreamingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompStreamingResponse* internal_default_instance() {
    return reinterpret_cast<const CompStreamingResponse*>(
               &_CompStreamingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CompStreamingResponse& a, CompStreamingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CompStreamingResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompStreamingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompStreamingResponse* New() const final {
    return CreateMaybeMessage<CompStreamingResponse>(nullptr);
  }

  CompStreamingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompStreamingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompStreamingResponse& from);
  void MergeFrom(const CompStreamingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompStreamingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Gateway.CompStreamingResponse";
  }
  protected:
  explicit CompStreamingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gateway_2eproto);
    return ::descriptor_table_gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentFieldNumber = 1,
  };
  // .l3deditor.Bom.Component component = 1;
  bool has_component() const;
  private:
  bool _internal_has_component() const;
  public:
  void clear_component();
  const ::l3deditor::Bom::Component& component() const;
  ::l3deditor::Bom::Component* release_component();
  ::l3deditor::Bom::Component* mutable_component();
  void set_allocated_component(::l3deditor::Bom::Component* component);
  private:
  const ::l3deditor::Bom::Component& _internal_component() const;
  ::l3deditor::Bom::Component* _internal_mutable_component();
  public:
  void unsafe_arena_set_allocated_component(
      ::l3deditor::Bom::Component* component);
  ::l3deditor::Bom::Component* unsafe_arena_release_component();

  // @@protoc_insertion_point(class_scope:l3deditor.Gateway.CompStreamingResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::l3deditor::Bom::Component* component_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class DocIdStreamingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Gateway.DocIdStreamingResponse) */ {
 public:
  DocIdStreamingResponse();
  virtual ~DocIdStreamingResponse();

  DocIdStreamingResponse(const DocIdStreamingResponse& from);
  DocIdStreamingResponse(DocIdStreamingResponse&& from) noexcept
    : DocIdStreamingResponse() {
    *this = ::std::move(from);
  }

  inline DocIdStreamingResponse& operator=(const DocIdStreamingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocIdStreamingResponse& operator=(DocIdStreamingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DocIdStreamingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocIdStreamingResponse* internal_default_instance() {
    return reinterpret_cast<const DocIdStreamingResponse*>(
               &_DocIdStreamingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DocIdStreamingResponse& a, DocIdStreamingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DocIdStreamingResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocIdStreamingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocIdStreamingResponse* New() const final {
    return CreateMaybeMessage<DocIdStreamingResponse>(nullptr);
  }

  DocIdStreamingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocIdStreamingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocIdStreamingResponse& from);
  void MergeFrom(const DocIdStreamingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocIdStreamingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Gateway.DocIdStreamingResponse";
  }
  protected:
  explicit DocIdStreamingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gateway_2eproto);
    return ::descriptor_table_gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentIdFieldNumber = 1,
  };
  // string documentId = 1;
  void clear_documentid();
  const std::string& documentid() const;
  void set_documentid(const std::string& value);
  void set_documentid(std::string&& value);
  void set_documentid(const char* value);
  void set_documentid(const char* value, size_t size);
  std::string* mutable_documentid();
  std::string* release_documentid();
  void set_allocated_documentid(std::string* documentid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_documentid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_documentid(
      std::string* documentid);
  private:
  const std::string& _internal_documentid() const;
  void _internal_set_documentid(const std::string& value);
  std::string* _internal_mutable_documentid();
  public:

  // @@protoc_insertion_point(class_scope:l3deditor.Gateway.DocIdStreamingResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr documentid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class Token :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Gateway.Token) */ {
 public:
  Token();
  virtual ~Token();

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Token& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Token* New() const final {
    return CreateMaybeMessage<Token>(nullptr);
  }

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Token& from);
  void MergeFrom(const Token& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Gateway.Token";
  }
  protected:
  explicit Token(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gateway_2eproto);
    return ::descriptor_table_gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostNameFieldNumber = 1,
    kMacFieldNumber = 2,
    kCpuIdFieldNumber = 3,
    kHdIdFieldNumber = 4,
    kCustomUniqFieldNumber = 6,
    kExpireTimeFieldNumber = 7,
    kHandleIdFieldNumber = 5,
  };
  // string hostName = 1;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hostname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hostname(
      std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string mac = 2;
  void clear_mac();
  const std::string& mac() const;
  void set_mac(const std::string& value);
  void set_mac(std::string&& value);
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  std::string* mutable_mac();
  std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mac();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mac(
      std::string* mac);
  private:
  const std::string& _internal_mac() const;
  void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // string cpuId = 3;
  void clear_cpuid();
  const std::string& cpuid() const;
  void set_cpuid(const std::string& value);
  void set_cpuid(std::string&& value);
  void set_cpuid(const char* value);
  void set_cpuid(const char* value, size_t size);
  std::string* mutable_cpuid();
  std::string* release_cpuid();
  void set_allocated_cpuid(std::string* cpuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cpuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cpuid(
      std::string* cpuid);
  private:
  const std::string& _internal_cpuid() const;
  void _internal_set_cpuid(const std::string& value);
  std::string* _internal_mutable_cpuid();
  public:

  // string hdId = 4;
  void clear_hdid();
  const std::string& hdid() const;
  void set_hdid(const std::string& value);
  void set_hdid(std::string&& value);
  void set_hdid(const char* value);
  void set_hdid(const char* value, size_t size);
  std::string* mutable_hdid();
  std::string* release_hdid();
  void set_allocated_hdid(std::string* hdid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hdid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hdid(
      std::string* hdid);
  private:
  const std::string& _internal_hdid() const;
  void _internal_set_hdid(const std::string& value);
  std::string* _internal_mutable_hdid();
  public:

  // string customUniq = 6;
  void clear_customuniq();
  const std::string& customuniq() const;
  void set_customuniq(const std::string& value);
  void set_customuniq(std::string&& value);
  void set_customuniq(const char* value);
  void set_customuniq(const char* value, size_t size);
  std::string* mutable_customuniq();
  std::string* release_customuniq();
  void set_allocated_customuniq(std::string* customuniq);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_customuniq();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_customuniq(
      std::string* customuniq);
  private:
  const std::string& _internal_customuniq() const;
  void _internal_set_customuniq(const std::string& value);
  std::string* _internal_mutable_customuniq();
  public:

  // uint64 expireTime = 7;
  void clear_expiretime();
  ::PROTOBUF_NAMESPACE_ID::uint64 expiretime() const;
  void set_expiretime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expiretime() const;
  void _internal_set_expiretime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 handleId = 5;
  void clear_handleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 handleid() const;
  void set_handleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_handleid() const;
  void _internal_set_handleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:l3deditor.Gateway.Token)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customuniq_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expiretime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 handleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class ClinetInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Gateway.ClinetInfo) */ {
 public:
  ClinetInfo();
  virtual ~ClinetInfo();

  ClinetInfo(const ClinetInfo& from);
  ClinetInfo(ClinetInfo&& from) noexcept
    : ClinetInfo() {
    *this = ::std::move(from);
  }

  inline ClinetInfo& operator=(const ClinetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClinetInfo& operator=(ClinetInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClinetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClinetInfo* internal_default_instance() {
    return reinterpret_cast<const ClinetInfo*>(
               &_ClinetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClinetInfo& a, ClinetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ClinetInfo* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClinetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClinetInfo* New() const final {
    return CreateMaybeMessage<ClinetInfo>(nullptr);
  }

  ClinetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClinetInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClinetInfo& from);
  void MergeFrom(const ClinetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClinetInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Gateway.ClinetInfo";
  }
  protected:
  explicit ClinetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gateway_2eproto);
    return ::descriptor_table_gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyFieldNumber = 3,
    kPriKeyFieldNumber = 4,
    kSignatureFieldNumber = 5,
    kTokenFieldNumber = 2,
    kConnectTimeFieldNumber = 6,
    kSignTimeFieldNumber = 7,
    kUIdFieldNumber = 1,
  };
  // string pubKey = 3;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const char* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pubkey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pubkey(
      std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // string priKey = 4;
  void clear_prikey();
  const std::string& prikey() const;
  void set_prikey(const std::string& value);
  void set_prikey(std::string&& value);
  void set_prikey(const char* value);
  void set_prikey(const char* value, size_t size);
  std::string* mutable_prikey();
  std::string* release_prikey();
  void set_allocated_prikey(std::string* prikey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_prikey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_prikey(
      std::string* prikey);
  private:
  const std::string& _internal_prikey() const;
  void _internal_set_prikey(const std::string& value);
  std::string* _internal_mutable_prikey();
  public:

  // string signature = 5;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .l3deditor.Gateway.Token token = 2;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::l3deditor::Gateway::Token& token() const;
  ::l3deditor::Gateway::Token* release_token();
  ::l3deditor::Gateway::Token* mutable_token();
  void set_allocated_token(::l3deditor::Gateway::Token* token);
  private:
  const ::l3deditor::Gateway::Token& _internal_token() const;
  ::l3deditor::Gateway::Token* _internal_mutable_token();
  public:
  void unsafe_arena_set_allocated_token(
      ::l3deditor::Gateway::Token* token);
  ::l3deditor::Gateway::Token* unsafe_arena_release_token();

  // uint64 connectTime = 6;
  void clear_connecttime();
  ::PROTOBUF_NAMESPACE_ID::uint64 connecttime() const;
  void set_connecttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_connecttime() const;
  void _internal_set_connecttime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 signTime = 7;
  void clear_signtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 signtime() const;
  void set_signtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_signtime() const;
  void _internal_set_signtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 uId = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:l3deditor.Gateway.ClinetInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prikey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::l3deditor::Gateway::Token* token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 connecttime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 signtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gateway_2eproto;
};
// -------------------------------------------------------------------

class CmdRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:l3deditor.Gateway.CmdRequest) */ {
 public:
  CmdRequest();
  virtual ~CmdRequest();

  CmdRequest(const CmdRequest& from);
  CmdRequest(CmdRequest&& from) noexcept
    : CmdRequest() {
    *this = ::std::move(from);
  }

  inline CmdRequest& operator=(const CmdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdRequest& operator=(CmdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdRequest* internal_default_instance() {
    return reinterpret_cast<const CmdRequest*>(
               &_CmdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CmdRequest& a, CmdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CmdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdRequest* New() const final {
    return CreateMaybeMessage<CmdRequest>(nullptr);
  }

  CmdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdRequest& from);
  void MergeFrom(const CmdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "l3deditor.Gateway.CmdRequest";
  }
  protected:
  explicit CmdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gateway_2eproto);
    return ::descriptor_table_gateway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 1,
    kCmdFieldNumber = 2,
  };
  // .l3deditor.Gateway.ClinetInfo client = 1;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::l3deditor::Gateway::ClinetInfo& client() const;
  ::l3deditor::Gateway::ClinetInfo* release_client();
  ::l3deditor::Gateway::ClinetInfo* mutable_client();
  void set_allocated_client(::l3deditor::Gateway::ClinetInfo* client);
  private:
  const ::l3deditor::Gateway::ClinetInfo& _internal_client() const;
  ::l3deditor::Gateway::ClinetInfo* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::l3deditor::Gateway::ClinetInfo* client);
  ::l3deditor::Gateway::ClinetInfo* unsafe_arena_release_client();

  // .l3deditor.Base.Command cmd = 2;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  const ::l3deditor::Base::Command& cmd() const;
  ::l3deditor::Base::Command* release_cmd();
  ::l3deditor::Base::Command* mutable_cmd();
  void set_allocated_cmd(::l3deditor::Base::Command* cmd);
  private:
  const ::l3deditor::Base::Command& _internal_cmd() const;
  ::l3deditor::Base::Command* _internal_mutable_cmd();
  public:
  void unsafe_arena_set_allocated_cmd(
      ::l3deditor::Base::Command* cmd);
  ::l3deditor::Base::Command* unsafe_arena_release_cmd();

  // @@protoc_insertion_point(class_scope:l3deditor.Gateway.CmdRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::l3deditor::Gateway::ClinetInfo* client_;
  ::l3deditor::Base::Command* cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gateway_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// .l3deditor.Gateway.ClinetInfo client = 1;
inline bool Empty::_internal_has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline bool Empty::has_client() const {
  return _internal_has_client();
}
inline void Empty::clear_client() {
  if (GetArenaNoVirtual() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
inline const ::l3deditor::Gateway::ClinetInfo& Empty::_internal_client() const {
  const ::l3deditor::Gateway::ClinetInfo* p = client_;
  return p != nullptr ? *p : *reinterpret_cast<const ::l3deditor::Gateway::ClinetInfo*>(
      &::l3deditor::Gateway::_ClinetInfo_default_instance_);
}
inline const ::l3deditor::Gateway::ClinetInfo& Empty::client() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.Empty.client)
  return _internal_client();
}
inline ::l3deditor::Gateway::ClinetInfo* Empty::release_client() {
  auto temp = unsafe_arena_release_client();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::l3deditor::Gateway::ClinetInfo* Empty::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.Empty.client)
  
  ::l3deditor::Gateway::ClinetInfo* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::l3deditor::Gateway::ClinetInfo* Empty::_internal_mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::l3deditor::Gateway::ClinetInfo>(GetArenaNoVirtual());
    client_ = p;
  }
  return client_;
}
inline ::l3deditor::Gateway::ClinetInfo* Empty::mutable_client() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.Empty.client)
  return _internal_mutable_client();
}
inline void Empty::set_allocated_client(::l3deditor::Gateway::ClinetInfo* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_;
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client);
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.Empty.client)
}

// -------------------------------------------------------------------

// BomRequest

// .l3deditor.Gateway.ClinetInfo client = 1;
inline bool BomRequest::_internal_has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline bool BomRequest::has_client() const {
  return _internal_has_client();
}
inline void BomRequest::clear_client() {
  if (GetArenaNoVirtual() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
inline const ::l3deditor::Gateway::ClinetInfo& BomRequest::_internal_client() const {
  const ::l3deditor::Gateway::ClinetInfo* p = client_;
  return p != nullptr ? *p : *reinterpret_cast<const ::l3deditor::Gateway::ClinetInfo*>(
      &::l3deditor::Gateway::_ClinetInfo_default_instance_);
}
inline const ::l3deditor::Gateway::ClinetInfo& BomRequest::client() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.BomRequest.client)
  return _internal_client();
}
inline ::l3deditor::Gateway::ClinetInfo* BomRequest::release_client() {
  auto temp = unsafe_arena_release_client();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::l3deditor::Gateway::ClinetInfo* BomRequest::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.BomRequest.client)
  
  ::l3deditor::Gateway::ClinetInfo* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::l3deditor::Gateway::ClinetInfo* BomRequest::_internal_mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::l3deditor::Gateway::ClinetInfo>(GetArenaNoVirtual());
    client_ = p;
  }
  return client_;
}
inline ::l3deditor::Gateway::ClinetInfo* BomRequest::mutable_client() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.BomRequest.client)
  return _internal_mutable_client();
}
inline void BomRequest::set_allocated_client(::l3deditor::Gateway::ClinetInfo* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_;
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client);
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.BomRequest.client)
}

// string documentId = 2;
inline bool BomRequest::_internal_has_documentid() const {
  return bom_oneof_case() == kDocumentId;
}
inline void BomRequest::set_has_documentid() {
  _oneof_case_[0] = kDocumentId;
}
inline void BomRequest::clear_documentid() {
  if (_internal_has_documentid()) {
    bom_oneof_.documentid_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_bom_oneof();
  }
}
inline const std::string& BomRequest::documentid() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.BomRequest.documentId)
  return _internal_documentid();
}
inline void BomRequest::set_documentid(const std::string& value) {
  _internal_set_documentid(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.BomRequest.documentId)
}
inline std::string* BomRequest::mutable_documentid() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.BomRequest.documentId)
  return _internal_mutable_documentid();
}
inline const std::string& BomRequest::_internal_documentid() const {
  if (_internal_has_documentid()) {
    return bom_oneof_.documentid_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BomRequest::_internal_set_documentid(const std::string& value) {
  if (!_internal_has_documentid()) {
    clear_bom_oneof();
    set_has_documentid();
    bom_oneof_.documentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  bom_oneof_.documentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
}
inline void BomRequest::set_documentid(std::string&& value) {
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.BomRequest.documentId)
  if (!_internal_has_documentid()) {
    clear_bom_oneof();
    set_has_documentid();
    bom_oneof_.documentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  bom_oneof_.documentid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Gateway.BomRequest.documentId)
}
inline void BomRequest::set_documentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_documentid()) {
    clear_bom_oneof();
    set_has_documentid();
    bom_oneof_.documentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  bom_oneof_.documentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Gateway.BomRequest.documentId)
}
inline void BomRequest::set_documentid(const char* value,
                             size_t size) {
  if (!_internal_has_documentid()) {
    clear_bom_oneof();
    set_has_documentid();
    bom_oneof_.documentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  bom_oneof_.documentid_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Gateway.BomRequest.documentId)
}
inline std::string* BomRequest::_internal_mutable_documentid() {
  if (!_internal_has_documentid()) {
    clear_bom_oneof();
    set_has_documentid();
    bom_oneof_.documentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return bom_oneof_.documentid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline std::string* BomRequest::release_documentid() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.BomRequest.documentId)
  if (_internal_has_documentid()) {
    clear_has_bom_oneof();
    return bom_oneof_.documentid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void BomRequest::set_allocated_documentid(std::string* documentid) {
  if (has_bom_oneof()) {
    clear_bom_oneof();
  }
  if (documentid != nullptr) {
    set_has_documentid();
    bom_oneof_.documentid_.UnsafeSetDefault(documentid);
  }
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.BomRequest.documentId)
}
inline std::string* BomRequest::unsafe_arena_release_documentid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Gateway.BomRequest.documentId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (_internal_has_documentid()) {
    clear_has_bom_oneof();
    return bom_oneof_.documentid_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void BomRequest::unsafe_arena_set_allocated_documentid(std::string* documentid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!_internal_has_documentid()) {
    bom_oneof_.documentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_bom_oneof();
  if (documentid) {
    set_has_documentid();
    bom_oneof_.documentid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), documentid, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Gateway.BomRequest.documentId)
}

// string componentId = 3;
inline bool BomRequest::_internal_has_componentid() const {
  return bom_oneof_case() == kComponentId;
}
inline void BomRequest::set_has_componentid() {
  _oneof_case_[0] = kComponentId;
}
inline void BomRequest::clear_componentid() {
  if (_internal_has_componentid()) {
    bom_oneof_.componentid_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_bom_oneof();
  }
}
inline const std::string& BomRequest::componentid() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.BomRequest.componentId)
  return _internal_componentid();
}
inline void BomRequest::set_componentid(const std::string& value) {
  _internal_set_componentid(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.BomRequest.componentId)
}
inline std::string* BomRequest::mutable_componentid() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.BomRequest.componentId)
  return _internal_mutable_componentid();
}
inline const std::string& BomRequest::_internal_componentid() const {
  if (_internal_has_componentid()) {
    return bom_oneof_.componentid_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BomRequest::_internal_set_componentid(const std::string& value) {
  if (!_internal_has_componentid()) {
    clear_bom_oneof();
    set_has_componentid();
    bom_oneof_.componentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  bom_oneof_.componentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
}
inline void BomRequest::set_componentid(std::string&& value) {
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.BomRequest.componentId)
  if (!_internal_has_componentid()) {
    clear_bom_oneof();
    set_has_componentid();
    bom_oneof_.componentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  bom_oneof_.componentid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Gateway.BomRequest.componentId)
}
inline void BomRequest::set_componentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_componentid()) {
    clear_bom_oneof();
    set_has_componentid();
    bom_oneof_.componentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  bom_oneof_.componentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Gateway.BomRequest.componentId)
}
inline void BomRequest::set_componentid(const char* value,
                             size_t size) {
  if (!_internal_has_componentid()) {
    clear_bom_oneof();
    set_has_componentid();
    bom_oneof_.componentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  bom_oneof_.componentid_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Gateway.BomRequest.componentId)
}
inline std::string* BomRequest::_internal_mutable_componentid() {
  if (!_internal_has_componentid()) {
    clear_bom_oneof();
    set_has_componentid();
    bom_oneof_.componentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return bom_oneof_.componentid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline std::string* BomRequest::release_componentid() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.BomRequest.componentId)
  if (_internal_has_componentid()) {
    clear_has_bom_oneof();
    return bom_oneof_.componentid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void BomRequest::set_allocated_componentid(std::string* componentid) {
  if (has_bom_oneof()) {
    clear_bom_oneof();
  }
  if (componentid != nullptr) {
    set_has_componentid();
    bom_oneof_.componentid_.UnsafeSetDefault(componentid);
  }
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.BomRequest.componentId)
}
inline std::string* BomRequest::unsafe_arena_release_componentid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Gateway.BomRequest.componentId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (_internal_has_componentid()) {
    clear_has_bom_oneof();
    return bom_oneof_.componentid_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void BomRequest::unsafe_arena_set_allocated_componentid(std::string* componentid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!_internal_has_componentid()) {
    bom_oneof_.componentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_bom_oneof();
  if (componentid) {
    set_has_componentid();
    bom_oneof_.componentid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), componentid, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Gateway.BomRequest.componentId)
}

inline bool BomRequest::has_bom_oneof() const {
  return bom_oneof_case() != BOM_ONEOF_NOT_SET;
}
inline void BomRequest::clear_has_bom_oneof() {
  _oneof_case_[0] = BOM_ONEOF_NOT_SET;
}
inline BomRequest::BomOneofCase BomRequest::bom_oneof_case() const {
  return BomRequest::BomOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BomResponse

// .l3deditor.Bom.Document document = 1;
inline bool BomResponse::_internal_has_document() const {
  return bom_oneof_case() == kDocument;
}
inline bool BomResponse::has_document() const {
  return _internal_has_document();
}
inline void BomResponse::set_has_document() {
  _oneof_case_[0] = kDocument;
}
inline ::l3deditor::Bom::Document* BomResponse::release_document() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.BomResponse.document)
  if (_internal_has_document()) {
    clear_has_bom_oneof();
      ::l3deditor::Bom::Document* temp = bom_oneof_.document_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    bom_oneof_.document_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::l3deditor::Bom::Document& BomResponse::_internal_document() const {
  return _internal_has_document()
      ? *bom_oneof_.document_
      : *reinterpret_cast< ::l3deditor::Bom::Document*>(&::l3deditor::Bom::_Document_default_instance_);
}
inline const ::l3deditor::Bom::Document& BomResponse::document() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.BomResponse.document)
  return _internal_document();
}
inline ::l3deditor::Bom::Document* BomResponse::unsafe_arena_release_document() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Gateway.BomResponse.document)
  if (_internal_has_document()) {
    clear_has_bom_oneof();
    ::l3deditor::Bom::Document* temp = bom_oneof_.document_;
    bom_oneof_.document_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BomResponse::unsafe_arena_set_allocated_document(::l3deditor::Bom::Document* document) {
  clear_bom_oneof();
  if (document) {
    set_has_document();
    bom_oneof_.document_ = document;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Gateway.BomResponse.document)
}
inline ::l3deditor::Bom::Document* BomResponse::_internal_mutable_document() {
  if (!_internal_has_document()) {
    clear_bom_oneof();
    set_has_document();
    bom_oneof_.document_ = CreateMaybeMessage< ::l3deditor::Bom::Document >(
        GetArenaNoVirtual());
  }
  return bom_oneof_.document_;
}
inline ::l3deditor::Bom::Document* BomResponse::mutable_document() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.BomResponse.document)
  return _internal_mutable_document();
}

// .l3deditor.Bom.Component component = 2;
inline bool BomResponse::_internal_has_component() const {
  return bom_oneof_case() == kComponent;
}
inline bool BomResponse::has_component() const {
  return _internal_has_component();
}
inline void BomResponse::set_has_component() {
  _oneof_case_[0] = kComponent;
}
inline ::l3deditor::Bom::Component* BomResponse::release_component() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.BomResponse.component)
  if (_internal_has_component()) {
    clear_has_bom_oneof();
      ::l3deditor::Bom::Component* temp = bom_oneof_.component_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    bom_oneof_.component_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::l3deditor::Bom::Component& BomResponse::_internal_component() const {
  return _internal_has_component()
      ? *bom_oneof_.component_
      : *reinterpret_cast< ::l3deditor::Bom::Component*>(&::l3deditor::Bom::_Component_default_instance_);
}
inline const ::l3deditor::Bom::Component& BomResponse::component() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.BomResponse.component)
  return _internal_component();
}
inline ::l3deditor::Bom::Component* BomResponse::unsafe_arena_release_component() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Gateway.BomResponse.component)
  if (_internal_has_component()) {
    clear_has_bom_oneof();
    ::l3deditor::Bom::Component* temp = bom_oneof_.component_;
    bom_oneof_.component_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BomResponse::unsafe_arena_set_allocated_component(::l3deditor::Bom::Component* component) {
  clear_bom_oneof();
  if (component) {
    set_has_component();
    bom_oneof_.component_ = component;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Gateway.BomResponse.component)
}
inline ::l3deditor::Bom::Component* BomResponse::_internal_mutable_component() {
  if (!_internal_has_component()) {
    clear_bom_oneof();
    set_has_component();
    bom_oneof_.component_ = CreateMaybeMessage< ::l3deditor::Bom::Component >(
        GetArenaNoVirtual());
  }
  return bom_oneof_.component_;
}
inline ::l3deditor::Bom::Component* BomResponse::mutable_component() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.BomResponse.component)
  return _internal_mutable_component();
}

inline bool BomResponse::has_bom_oneof() const {
  return bom_oneof_case() != BOM_ONEOF_NOT_SET;
}
inline void BomResponse::clear_has_bom_oneof() {
  _oneof_case_[0] = BOM_ONEOF_NOT_SET;
}
inline BomResponse::BomOneofCase BomResponse::bom_oneof_case() const {
  return BomResponse::BomOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CompStreamingResponse

// .l3deditor.Bom.Component component = 1;
inline bool CompStreamingResponse::_internal_has_component() const {
  return this != internal_default_instance() && component_ != nullptr;
}
inline bool CompStreamingResponse::has_component() const {
  return _internal_has_component();
}
inline const ::l3deditor::Bom::Component& CompStreamingResponse::_internal_component() const {
  const ::l3deditor::Bom::Component* p = component_;
  return p != nullptr ? *p : *reinterpret_cast<const ::l3deditor::Bom::Component*>(
      &::l3deditor::Bom::_Component_default_instance_);
}
inline const ::l3deditor::Bom::Component& CompStreamingResponse::component() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.CompStreamingResponse.component)
  return _internal_component();
}
inline ::l3deditor::Bom::Component* CompStreamingResponse::release_component() {
  auto temp = unsafe_arena_release_component();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::l3deditor::Bom::Component* CompStreamingResponse::unsafe_arena_release_component() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.CompStreamingResponse.component)
  
  ::l3deditor::Bom::Component* temp = component_;
  component_ = nullptr;
  return temp;
}
inline ::l3deditor::Bom::Component* CompStreamingResponse::_internal_mutable_component() {
  
  if (component_ == nullptr) {
    auto* p = CreateMaybeMessage<::l3deditor::Bom::Component>(GetArenaNoVirtual());
    component_ = p;
  }
  return component_;
}
inline ::l3deditor::Bom::Component* CompStreamingResponse::mutable_component() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.CompStreamingResponse.component)
  return _internal_mutable_component();
}
inline void CompStreamingResponse::set_allocated_component(::l3deditor::Bom::Component* component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(component_);
  }
  if (component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(component)->GetArena();
    if (message_arena != submessage_arena) {
      component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component, submessage_arena);
    }
    
  } else {
    
  }
  component_ = component;
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.CompStreamingResponse.component)
}

// -------------------------------------------------------------------

// DocIdStreamingResponse

// string documentId = 1;
inline void DocIdStreamingResponse::clear_documentid() {
  documentid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& DocIdStreamingResponse::documentid() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.DocIdStreamingResponse.documentId)
  return _internal_documentid();
}
inline void DocIdStreamingResponse::set_documentid(const std::string& value) {
  _internal_set_documentid(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.DocIdStreamingResponse.documentId)
}
inline std::string* DocIdStreamingResponse::mutable_documentid() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.DocIdStreamingResponse.documentId)
  return _internal_mutable_documentid();
}
inline const std::string& DocIdStreamingResponse::_internal_documentid() const {
  return documentid_.Get();
}
inline void DocIdStreamingResponse::_internal_set_documentid(const std::string& value) {
  
  documentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void DocIdStreamingResponse::set_documentid(std::string&& value) {
  
  documentid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Gateway.DocIdStreamingResponse.documentId)
}
inline void DocIdStreamingResponse::set_documentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  documentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Gateway.DocIdStreamingResponse.documentId)
}
inline void DocIdStreamingResponse::set_documentid(const char* value,
    size_t size) {
  
  documentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Gateway.DocIdStreamingResponse.documentId)
}
inline std::string* DocIdStreamingResponse::_internal_mutable_documentid() {
  
  return documentid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* DocIdStreamingResponse::release_documentid() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.DocIdStreamingResponse.documentId)
  
  return documentid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DocIdStreamingResponse::set_allocated_documentid(std::string* documentid) {
  if (documentid != nullptr) {
    
  } else {
    
  }
  documentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), documentid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.DocIdStreamingResponse.documentId)
}
inline std::string* DocIdStreamingResponse::unsafe_arena_release_documentid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Gateway.DocIdStreamingResponse.documentId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return documentid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DocIdStreamingResponse::unsafe_arena_set_allocated_documentid(
    std::string* documentid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (documentid != nullptr) {
    
  } else {
    
  }
  documentid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      documentid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Gateway.DocIdStreamingResponse.documentId)
}

// -------------------------------------------------------------------

// Token

// string hostName = 1;
inline void Token::clear_hostname() {
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Token::hostname() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.Token.hostName)
  return _internal_hostname();
}
inline void Token::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.Token.hostName)
}
inline std::string* Token::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.Token.hostName)
  return _internal_mutable_hostname();
}
inline const std::string& Token::_internal_hostname() const {
  return hostname_.Get();
}
inline void Token::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void Token::set_hostname(std::string&& value) {
  
  hostname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Gateway.Token.hostName)
}
inline void Token::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Gateway.Token.hostName)
}
inline void Token::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Gateway.Token.hostName)
}
inline std::string* Token::_internal_mutable_hostname() {
  
  return hostname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Token::release_hostname() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.Token.hostName)
  
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Token::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.Token.hostName)
}
inline std::string* Token::unsafe_arena_release_hostname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Gateway.Token.hostName)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return hostname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Token::unsafe_arena_set_allocated_hostname(
    std::string* hostname) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hostname, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Gateway.Token.hostName)
}

// string mac = 2;
inline void Token::clear_mac() {
  mac_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Token::mac() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.Token.mac)
  return _internal_mac();
}
inline void Token::set_mac(const std::string& value) {
  _internal_set_mac(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.Token.mac)
}
inline std::string* Token::mutable_mac() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.Token.mac)
  return _internal_mutable_mac();
}
inline const std::string& Token::_internal_mac() const {
  return mac_.Get();
}
inline void Token::_internal_set_mac(const std::string& value) {
  
  mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void Token::set_mac(std::string&& value) {
  
  mac_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Gateway.Token.mac)
}
inline void Token::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Gateway.Token.mac)
}
inline void Token::set_mac(const char* value,
    size_t size) {
  
  mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Gateway.Token.mac)
}
inline std::string* Token::_internal_mutable_mac() {
  
  return mac_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Token::release_mac() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.Token.mac)
  
  return mac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Token::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.Token.mac)
}
inline std::string* Token::unsafe_arena_release_mac() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Gateway.Token.mac)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return mac_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Token::unsafe_arena_set_allocated_mac(
    std::string* mac) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mac, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Gateway.Token.mac)
}

// string cpuId = 3;
inline void Token::clear_cpuid() {
  cpuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Token::cpuid() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.Token.cpuId)
  return _internal_cpuid();
}
inline void Token::set_cpuid(const std::string& value) {
  _internal_set_cpuid(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.Token.cpuId)
}
inline std::string* Token::mutable_cpuid() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.Token.cpuId)
  return _internal_mutable_cpuid();
}
inline const std::string& Token::_internal_cpuid() const {
  return cpuid_.Get();
}
inline void Token::_internal_set_cpuid(const std::string& value) {
  
  cpuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void Token::set_cpuid(std::string&& value) {
  
  cpuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Gateway.Token.cpuId)
}
inline void Token::set_cpuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cpuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Gateway.Token.cpuId)
}
inline void Token::set_cpuid(const char* value,
    size_t size) {
  
  cpuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Gateway.Token.cpuId)
}
inline std::string* Token::_internal_mutable_cpuid() {
  
  return cpuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Token::release_cpuid() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.Token.cpuId)
  
  return cpuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Token::set_allocated_cpuid(std::string* cpuid) {
  if (cpuid != nullptr) {
    
  } else {
    
  }
  cpuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpuid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.Token.cpuId)
}
inline std::string* Token::unsafe_arena_release_cpuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Gateway.Token.cpuId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return cpuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Token::unsafe_arena_set_allocated_cpuid(
    std::string* cpuid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (cpuid != nullptr) {
    
  } else {
    
  }
  cpuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cpuid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Gateway.Token.cpuId)
}

// string hdId = 4;
inline void Token::clear_hdid() {
  hdid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Token::hdid() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.Token.hdId)
  return _internal_hdid();
}
inline void Token::set_hdid(const std::string& value) {
  _internal_set_hdid(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.Token.hdId)
}
inline std::string* Token::mutable_hdid() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.Token.hdId)
  return _internal_mutable_hdid();
}
inline const std::string& Token::_internal_hdid() const {
  return hdid_.Get();
}
inline void Token::_internal_set_hdid(const std::string& value) {
  
  hdid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void Token::set_hdid(std::string&& value) {
  
  hdid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Gateway.Token.hdId)
}
inline void Token::set_hdid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hdid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Gateway.Token.hdId)
}
inline void Token::set_hdid(const char* value,
    size_t size) {
  
  hdid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Gateway.Token.hdId)
}
inline std::string* Token::_internal_mutable_hdid() {
  
  return hdid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Token::release_hdid() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.Token.hdId)
  
  return hdid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Token::set_allocated_hdid(std::string* hdid) {
  if (hdid != nullptr) {
    
  } else {
    
  }
  hdid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hdid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.Token.hdId)
}
inline std::string* Token::unsafe_arena_release_hdid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Gateway.Token.hdId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return hdid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Token::unsafe_arena_set_allocated_hdid(
    std::string* hdid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (hdid != nullptr) {
    
  } else {
    
  }
  hdid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hdid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Gateway.Token.hdId)
}

// uint32 handleId = 5;
inline void Token::clear_handleid() {
  handleid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Token::_internal_handleid() const {
  return handleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Token::handleid() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.Token.handleId)
  return _internal_handleid();
}
inline void Token::_internal_set_handleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  handleid_ = value;
}
inline void Token::set_handleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_handleid(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.Token.handleId)
}

// string customUniq = 6;
inline void Token::clear_customuniq() {
  customuniq_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Token::customuniq() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.Token.customUniq)
  return _internal_customuniq();
}
inline void Token::set_customuniq(const std::string& value) {
  _internal_set_customuniq(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.Token.customUniq)
}
inline std::string* Token::mutable_customuniq() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.Token.customUniq)
  return _internal_mutable_customuniq();
}
inline const std::string& Token::_internal_customuniq() const {
  return customuniq_.Get();
}
inline void Token::_internal_set_customuniq(const std::string& value) {
  
  customuniq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void Token::set_customuniq(std::string&& value) {
  
  customuniq_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Gateway.Token.customUniq)
}
inline void Token::set_customuniq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customuniq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Gateway.Token.customUniq)
}
inline void Token::set_customuniq(const char* value,
    size_t size) {
  
  customuniq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Gateway.Token.customUniq)
}
inline std::string* Token::_internal_mutable_customuniq() {
  
  return customuniq_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Token::release_customuniq() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.Token.customUniq)
  
  return customuniq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Token::set_allocated_customuniq(std::string* customuniq) {
  if (customuniq != nullptr) {
    
  } else {
    
  }
  customuniq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customuniq,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.Token.customUniq)
}
inline std::string* Token::unsafe_arena_release_customuniq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Gateway.Token.customUniq)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return customuniq_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Token::unsafe_arena_set_allocated_customuniq(
    std::string* customuniq) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (customuniq != nullptr) {
    
  } else {
    
  }
  customuniq_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      customuniq, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Gateway.Token.customUniq)
}

// uint64 expireTime = 7;
inline void Token::clear_expiretime() {
  expiretime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Token::_internal_expiretime() const {
  return expiretime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Token::expiretime() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.Token.expireTime)
  return _internal_expiretime();
}
inline void Token::_internal_set_expiretime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  expiretime_ = value;
}
inline void Token::set_expiretime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expiretime(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.Token.expireTime)
}

// -------------------------------------------------------------------

// ClinetInfo

// uint32 uId = 1;
inline void ClinetInfo::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClinetInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClinetInfo::uid() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.ClinetInfo.uId)
  return _internal_uid();
}
inline void ClinetInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void ClinetInfo::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.ClinetInfo.uId)
}

// .l3deditor.Gateway.Token token = 2;
inline bool ClinetInfo::_internal_has_token() const {
  return this != internal_default_instance() && token_ != nullptr;
}
inline bool ClinetInfo::has_token() const {
  return _internal_has_token();
}
inline void ClinetInfo::clear_token() {
  if (GetArenaNoVirtual() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
}
inline const ::l3deditor::Gateway::Token& ClinetInfo::_internal_token() const {
  const ::l3deditor::Gateway::Token* p = token_;
  return p != nullptr ? *p : *reinterpret_cast<const ::l3deditor::Gateway::Token*>(
      &::l3deditor::Gateway::_Token_default_instance_);
}
inline const ::l3deditor::Gateway::Token& ClinetInfo::token() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.ClinetInfo.token)
  return _internal_token();
}
inline ::l3deditor::Gateway::Token* ClinetInfo::release_token() {
  auto temp = unsafe_arena_release_token();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::l3deditor::Gateway::Token* ClinetInfo::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.ClinetInfo.token)
  
  ::l3deditor::Gateway::Token* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::l3deditor::Gateway::Token* ClinetInfo::_internal_mutable_token() {
  
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::l3deditor::Gateway::Token>(GetArenaNoVirtual());
    token_ = p;
  }
  return token_;
}
inline ::l3deditor::Gateway::Token* ClinetInfo::mutable_token() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.ClinetInfo.token)
  return _internal_mutable_token();
}
inline void ClinetInfo::set_allocated_token(::l3deditor::Gateway::Token* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete token_;
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(token);
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    
  } else {
    
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.ClinetInfo.token)
}

// string pubKey = 3;
inline void ClinetInfo::clear_pubkey() {
  pubkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ClinetInfo::pubkey() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.ClinetInfo.pubKey)
  return _internal_pubkey();
}
inline void ClinetInfo::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.ClinetInfo.pubKey)
}
inline std::string* ClinetInfo::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.ClinetInfo.pubKey)
  return _internal_mutable_pubkey();
}
inline const std::string& ClinetInfo::_internal_pubkey() const {
  return pubkey_.Get();
}
inline void ClinetInfo::_internal_set_pubkey(const std::string& value) {
  
  pubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ClinetInfo::set_pubkey(std::string&& value) {
  
  pubkey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Gateway.ClinetInfo.pubKey)
}
inline void ClinetInfo::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Gateway.ClinetInfo.pubKey)
}
inline void ClinetInfo::set_pubkey(const char* value,
    size_t size) {
  
  pubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Gateway.ClinetInfo.pubKey)
}
inline std::string* ClinetInfo::_internal_mutable_pubkey() {
  
  return pubkey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ClinetInfo::release_pubkey() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.ClinetInfo.pubKey)
  
  return pubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ClinetInfo::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.ClinetInfo.pubKey)
}
inline std::string* ClinetInfo::unsafe_arena_release_pubkey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Gateway.ClinetInfo.pubKey)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return pubkey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ClinetInfo::unsafe_arena_set_allocated_pubkey(
    std::string* pubkey) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pubkey, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Gateway.ClinetInfo.pubKey)
}

// string priKey = 4;
inline void ClinetInfo::clear_prikey() {
  prikey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ClinetInfo::prikey() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.ClinetInfo.priKey)
  return _internal_prikey();
}
inline void ClinetInfo::set_prikey(const std::string& value) {
  _internal_set_prikey(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.ClinetInfo.priKey)
}
inline std::string* ClinetInfo::mutable_prikey() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.ClinetInfo.priKey)
  return _internal_mutable_prikey();
}
inline const std::string& ClinetInfo::_internal_prikey() const {
  return prikey_.Get();
}
inline void ClinetInfo::_internal_set_prikey(const std::string& value) {
  
  prikey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ClinetInfo::set_prikey(std::string&& value) {
  
  prikey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Gateway.ClinetInfo.priKey)
}
inline void ClinetInfo::set_prikey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prikey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Gateway.ClinetInfo.priKey)
}
inline void ClinetInfo::set_prikey(const char* value,
    size_t size) {
  
  prikey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Gateway.ClinetInfo.priKey)
}
inline std::string* ClinetInfo::_internal_mutable_prikey() {
  
  return prikey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ClinetInfo::release_prikey() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.ClinetInfo.priKey)
  
  return prikey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ClinetInfo::set_allocated_prikey(std::string* prikey) {
  if (prikey != nullptr) {
    
  } else {
    
  }
  prikey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prikey,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.ClinetInfo.priKey)
}
inline std::string* ClinetInfo::unsafe_arena_release_prikey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Gateway.ClinetInfo.priKey)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return prikey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ClinetInfo::unsafe_arena_set_allocated_prikey(
    std::string* prikey) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (prikey != nullptr) {
    
  } else {
    
  }
  prikey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      prikey, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Gateway.ClinetInfo.priKey)
}

// string signature = 5;
inline void ClinetInfo::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ClinetInfo::signature() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.ClinetInfo.signature)
  return _internal_signature();
}
inline void ClinetInfo::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.ClinetInfo.signature)
}
inline std::string* ClinetInfo::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.ClinetInfo.signature)
  return _internal_mutable_signature();
}
inline const std::string& ClinetInfo::_internal_signature() const {
  return signature_.Get();
}
inline void ClinetInfo::_internal_set_signature(const std::string& value) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ClinetInfo::set_signature(std::string&& value) {
  
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:l3deditor.Gateway.ClinetInfo.signature)
}
inline void ClinetInfo::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:l3deditor.Gateway.ClinetInfo.signature)
}
inline void ClinetInfo::set_signature(const char* value,
    size_t size) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:l3deditor.Gateway.ClinetInfo.signature)
}
inline std::string* ClinetInfo::_internal_mutable_signature() {
  
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ClinetInfo::release_signature() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.ClinetInfo.signature)
  
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ClinetInfo::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.ClinetInfo.signature)
}
inline std::string* ClinetInfo::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:l3deditor.Gateway.ClinetInfo.signature)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return signature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ClinetInfo::unsafe_arena_set_allocated_signature(
    std::string* signature) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signature, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:l3deditor.Gateway.ClinetInfo.signature)
}

// uint64 connectTime = 6;
inline void ClinetInfo::clear_connecttime() {
  connecttime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClinetInfo::_internal_connecttime() const {
  return connecttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClinetInfo::connecttime() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.ClinetInfo.connectTime)
  return _internal_connecttime();
}
inline void ClinetInfo::_internal_set_connecttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  connecttime_ = value;
}
inline void ClinetInfo::set_connecttime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_connecttime(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.ClinetInfo.connectTime)
}

// uint64 signTime = 7;
inline void ClinetInfo::clear_signtime() {
  signtime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClinetInfo::_internal_signtime() const {
  return signtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClinetInfo::signtime() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.ClinetInfo.signTime)
  return _internal_signtime();
}
inline void ClinetInfo::_internal_set_signtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  signtime_ = value;
}
inline void ClinetInfo::set_signtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_signtime(value);
  // @@protoc_insertion_point(field_set:l3deditor.Gateway.ClinetInfo.signTime)
}

// -------------------------------------------------------------------

// CmdRequest

// .l3deditor.Gateway.ClinetInfo client = 1;
inline bool CmdRequest::_internal_has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline bool CmdRequest::has_client() const {
  return _internal_has_client();
}
inline void CmdRequest::clear_client() {
  if (GetArenaNoVirtual() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
inline const ::l3deditor::Gateway::ClinetInfo& CmdRequest::_internal_client() const {
  const ::l3deditor::Gateway::ClinetInfo* p = client_;
  return p != nullptr ? *p : *reinterpret_cast<const ::l3deditor::Gateway::ClinetInfo*>(
      &::l3deditor::Gateway::_ClinetInfo_default_instance_);
}
inline const ::l3deditor::Gateway::ClinetInfo& CmdRequest::client() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.CmdRequest.client)
  return _internal_client();
}
inline ::l3deditor::Gateway::ClinetInfo* CmdRequest::release_client() {
  auto temp = unsafe_arena_release_client();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::l3deditor::Gateway::ClinetInfo* CmdRequest::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.CmdRequest.client)
  
  ::l3deditor::Gateway::ClinetInfo* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::l3deditor::Gateway::ClinetInfo* CmdRequest::_internal_mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::l3deditor::Gateway::ClinetInfo>(GetArenaNoVirtual());
    client_ = p;
  }
  return client_;
}
inline ::l3deditor::Gateway::ClinetInfo* CmdRequest::mutable_client() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.CmdRequest.client)
  return _internal_mutable_client();
}
inline void CmdRequest::set_allocated_client(::l3deditor::Gateway::ClinetInfo* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_;
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client);
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.CmdRequest.client)
}

// .l3deditor.Base.Command cmd = 2;
inline bool CmdRequest::_internal_has_cmd() const {
  return this != internal_default_instance() && cmd_ != nullptr;
}
inline bool CmdRequest::has_cmd() const {
  return _internal_has_cmd();
}
inline const ::l3deditor::Base::Command& CmdRequest::_internal_cmd() const {
  const ::l3deditor::Base::Command* p = cmd_;
  return p != nullptr ? *p : *reinterpret_cast<const ::l3deditor::Base::Command*>(
      &::l3deditor::Base::_Command_default_instance_);
}
inline const ::l3deditor::Base::Command& CmdRequest::cmd() const {
  // @@protoc_insertion_point(field_get:l3deditor.Gateway.CmdRequest.cmd)
  return _internal_cmd();
}
inline ::l3deditor::Base::Command* CmdRequest::release_cmd() {
  auto temp = unsafe_arena_release_cmd();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::l3deditor::Base::Command* CmdRequest::unsafe_arena_release_cmd() {
  // @@protoc_insertion_point(field_release:l3deditor.Gateway.CmdRequest.cmd)
  
  ::l3deditor::Base::Command* temp = cmd_;
  cmd_ = nullptr;
  return temp;
}
inline ::l3deditor::Base::Command* CmdRequest::_internal_mutable_cmd() {
  
  if (cmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::l3deditor::Base::Command>(GetArenaNoVirtual());
    cmd_ = p;
  }
  return cmd_;
}
inline ::l3deditor::Base::Command* CmdRequest::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable:l3deditor.Gateway.CmdRequest.cmd)
  return _internal_mutable_cmd();
}
inline void CmdRequest::set_allocated_cmd(::l3deditor::Base::Command* cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd_);
  }
  if (cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd)->GetArena();
    if (message_arena != submessage_arena) {
      cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmd, submessage_arena);
    }
    
  } else {
    
  }
  cmd_ = cmd;
  // @@protoc_insertion_point(field_set_allocated:l3deditor.Gateway.CmdRequest.cmd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Gateway
}  // namespace l3deditor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gateway_2eproto
